/*!
 * THIS FILE IS GENERATED BY GULP PROJECT. 
 * NEVER CHANGE IT MANUALLY, OTHERWISE YOUR CHANGES 
 * CAN BE OVERWRITTEN. 
 * 
 * @description 
 * @repository git@bitbucket.org:ildar-meyker/html-barsgroup.git
 */

(function () {

	var iOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;

	if (!iOS) return;

	function appendStyle(styles) {
	  var css = document.createElement('style');
	  css.type = 'text/css';

	  if (css.styleSheet) css.styleSheet.cssText = styles;
	  else css.appendChild(document.createTextNode(styles));

	  document.getElementsByTagName("head")[0].appendChild(css);
	}

	var styles = '* {cursor: pointer; }';

	window.onload = function() { appendStyle(styles) };

})();

var ImDigits = {

	_state: {
		currentIndex: null,
		touchStartX: null,
		touchStartY: null,
		animating: false
	},

	_getRealIndex: function (index) {
		var self = this;

		return index % self._getRealCount(); 
	},

	_getNumsCount: function () {
		return $('#im-digits .im-digits__nums__item').length;
	},

	_getRealCount: function () {
		return $('#im-digits .im-digits__pics__item').length;
	},

	_getDirection: function (nextIndex) {
		var self = this;

		var currentIndex = self._state.currentIndex;
		return (nextIndex > currentIndex) ? 'left' : 'right';
	},

	_setInitialPosition: function () {
		var self = this;

		var count = self._getRealCount();

		self._state.currentIndex = count;
		self._moveNumsToItem(count);
	},

	_setRightRebasePos: function () {
		var self = this;

		var count = self._getRealCount();
		var nextIndex = self._state.currentIndex - count;

		self._state.currentIndex = nextIndex;
		self._moveNumsToItem(nextIndex);
	},

	_setVisibleState: function () {
		$('#im-digits').addClass('_visible');
	},

	_setReadyState: function () {
		setTimeout(function () {
			$('#im-digits').addClass('_ready');
		}, 20);
	},

	_cloneNumsItems: function () {
		var self = this;

		var $_ = $('#im-digits');
		var $numsCrop = $_.find('.im-digits__nums__crop');
		var $numsList = $_.find('.im-digits__nums__list');
		var $numsItem = $_.find('.im-digits__nums__item');
		var cropWidth = $numsCrop.width();
		var listWidth = $numsList.width();
		var factor = Math.ceil(cropWidth / listWidth) + 1;

		for (var i = 0; i < factor; i++) {
			$numsItem.clone().appendTo($numsList);
		}
	},

	_slideToItem: function (index) {
		var self = this;

		if ( self._state.animating ) return;
		self._state.animating = true;

		// indexes
		var currIndex = self._state.currentIndex;
		var nextIndex = index;

		// elements
		var $_ = $('#im-digits');
		var $numsCrop = $_.find('.im-digits__nums__crop');
		
		var $nextNumsItem = $_.find('.im-digits__nums__item').eq(nextIndex);
		var $nextPicsItem = $_.find('.im-digits__pics__item').eq(self._getRealIndex(nextIndex));
		var $nextTextItem = $_.find('.im-digits__text__item').eq(self._getRealIndex(nextIndex));
		var $nextTextValue = $nextTextItem.find('.im-digits__text__value');
		var $nextTextDesc = $nextTextItem.find('.im-digits__text__desc');

		var $currNumsItem = $_.find('.im-digits__nums__item').eq(currIndex);
		var $currPicsItem = $_.find('.im-digits__pics__item').eq(self._getRealIndex(currIndex));
		var $currTextItem = $_.find('.im-digits__text__item').eq(self._getRealIndex(currIndex));
		var $currTextValue = $currTextItem.find('.im-digits__text__value');
		var $currTextDesc = $currTextItem.find('.im-digits__text__desc');

		var $aboutItem = $_.find('.im-digits__about__item');

		// direction
		var direction = self._getDirection(index);

		$aboutItem.eq(self._getRealIndex(currIndex)).removeClass('_active');
		
		setTimeout(function () {
			$aboutItem.eq(self._getRealIndex(nextIndex)).addClass('_active');
		}, 0);

		switch (direction) {
			case 'left': 

				// create fake copy of next num item
				var $fakeNumsItem = $nextNumsItem.clone();
				var position = $nextNumsItem.offset().left - $numsCrop.offset().left;
				$fakeNumsItem.addClass('_fixed').css({'left': position}).appendTo($numsCrop);
				$nextNumsItem.addClass('_hidden');

				// get the distance we will animate
				var distance = $fakeNumsItem.offset().left - $nextTextValue.offset().left;
				
				// set next text value to start position
				$nextTextValue.css({'transform': 'translateX(' + distance + 'px)'});

				// hide things
				$currTextDesc.addClass('_fadeOutLeft');
				$currTextValue.addClass('_fadeOutLeft');

				// show things
				setTimeout(function () {
					$nextPicsItem.addClass('_active _cover _fadeInImage');
					$nextTextDesc.addClass('_fadeInRight');
					$nextTextValue.addClass('_ready').css({'transform': 'translateX(0)'});
					$nextTextItem.addClass('_active');
					$fakeNumsItem.css({'transform': 'translateX(-' + distance + 'px)'});
					self._moveNumsToItem(nextIndex);
				}, 0);

			break;
			case 'right':

				// create fake copy of next num item
				var $fakeNumsItem = $currNumsItem.clone();
				var position = $currTextValue.offset().left - $numsCrop.offset().left;
				$fakeNumsItem.addClass('_fixed').css({'left': position}).appendTo($numsCrop);
				$currNumsItem.addClass('_hidden');

				// get the distance we will animate
				var distance = $numsCrop.offset().left - $currTextValue.offset().left + 
					parseFloat($currNumsItem.css('margin-left'));

				// hide things
				$currTextDesc.addClass('_fadeOutRight');
				$currTextValue.addClass('_ready').css({'transform': 'translateX(' + distance + 'px)'});
				$fakeNumsItem.css({'transform': 'translateX(' + distance + 'px)'});
				self._moveNumsToItem(nextIndex);

				// show things
				setTimeout(function () {
					$nextPicsItem.addClass('_active _cover _fadeInImage');
					$nextTextDesc.addClass('_fadeInLeft');
					$nextTextValue.addClass('_fadeInLeft');
					$nextTextItem.addClass('_active');
				}, 0);

			break;
		}

		setTimeout(function () {

			// clear transition classes
			$currPicsItem.removeClass('_active');
			$currTextItem.removeClass('_active');
			$currTextDesc.removeClass('_fadeOutLeft _fadeOutRight');
			$currTextValue.removeClass('_ready _fadeOutLeft').attr('style', '');
			$currNumsItem.removeClass('_hidden');

			$nextPicsItem.removeClass('_cover _fadeInImage');
			$nextTextDesc.removeClass('_fadeInRight _fadeInLeft');
			$nextTextValue.removeClass('_ready _fadeInLeft').attr('style', '');
			$nextNumsItem.removeClass('_hidden');
			
			$fakeNumsItem.remove();

			// allow animating
			self._state.animating = false;
			self._state.currentIndex = nextIndex;

			// rebase, if no side clones
			self._rebaseAtEdges();
		}, 700);

	},

	_moveNumsToItem: function (index) {
		var self = this;

		// сложить ширину и отступ всех элементов до текущего 
		var $items = $('#im-digits .im-digits__nums__item');
		var maxIndex = Math.min(index, self._getNumsCount() - 1);
		var listOffset = 0;

		for (var i = 0; i <= maxIndex; i++) {
			listOffset += parseFloat($items.eq(i).width());
			listOffset += parseFloat($items.eq(i).css('margin-left'));
		}
		
		var $list = $('#im-digits .im-digits__nums__list');
		$list.css({'transform': 'translateX(-' + listOffset + 'px)'});
	},

	_rebaseAtEdges: function () {
		var self = this;

		var $_ = $('#im-digits');
		var $numsCrop = $_.find('.im-digits__nums__crop');
		var $numsItem = $_.find('.im-digits__nums__item');
		var penultOffset = $numsItem .last().prev().offset().left;
		var rightEdge = $numsCrop.offset().left + $numsCrop.width();
		var currIndex = self._state.currentIndex;

		if (currIndex == 0 || penultOffset < rightEdge) {
			$('#im-digits').removeClass('_ready');

			if (currIndex == 0) {
				self._setInitialPosition();
			} else {
				self._setRightRebasePos();
			}
			setTimeout(function () {
				$('#im-digits').addClass('_ready');
			}, 20);
		} 
	},

	_initImagerJs: function () {
		new Imager('#im-digits .im-digits__pics__item img', { 
			availableWidths: [600, 1000], 
			availablePixelRatios: [1, 2],
			onImagesReplaced: function () {
				$(this.selector).each(function () {
					var src = $(this).attr('src');
					$(this).parent().css({ 'background-image': 'url(' + src + ')' });
				});
			}
		});
	},

	_handleNumClick: function (e) {
		var self = e.data.self;

		e.preventDefault();

		var nextIndex = $(this).index();
		self._slideToItem(nextIndex);
	},

	_handlePrevClick: function (e) {
		var self = e.data.self;

		e.preventDefault();

		var nextIndex = self._state.currentIndex - 1;
		self._slideToItem(nextIndex);
	},

	_handleNextClick: function (e) {
		var self = e.data.self;

		e.preventDefault();

		var nextIndex = self._state.currentIndex + 1;
		self._slideToItem(nextIndex);
	},

	_handleWindowResize: function (e) {
		var self = e.data.self;

		var currIndex = self._state.currentIndex;
		self._moveNumsToItem(currIndex);
	},

	_handleTouchStart: function (e) {
		var self = e.data.self;

		self._state.touchStartX = e.originalEvent.touches[0].clientX;
		self._state.touchStartY = e.originalEvent.touches[0].clientX;
	},

	_handleTouchMove: function (e) {
		var self = e.data.self;

		var touchStartX = self._state.touchStartX;
		var touchStartY = self._state.touchStartY;

		var deltaX = touchStartX - e.originalEvent.touches[0].clientX;
		var deltaY = touchStartY - e.originalEvent.touches[0].clientY;
		
		if (Math.abs(deltaX) > 100 && Math.abs(deltaX) > Math.abs(deltaY)) {
			if (deltaX > 0) {
				// swipe left
				var nextIndex = self._state.currentIndex + 1;
			} else {
				// swipe right
				var nextIndex = self._state.currentIndex - 1;
			}
			self._slideToItem(nextIndex);
		}
	},

	_bindUI: function () {
		var self = this;

		$(document).on('click', '.im-digits__nums__item', {self: self}, self._handleNumClick);
		$(document).on('click', '#im-digits .im-digits__prev', {self: self}, self._handlePrevClick);
		$(document).on('click', '#im-digits .im-digits__next', {self: self}, self._handleNextClick);
		$(document).on('touchstart', '.im-digits__center', {self: self}, self._handleTouchStart);
		$(document).on('touchmove', '.im-digits__center', {self: self}, self._handleTouchMove);
		$(window).on('resize orientationchange', {self: self}, self._handleWindowResize);
	},

	init: function () {
		var self = this;

		if ( $('#im-digits').length == 0 ) return;

		self._initImagerJs();
		self._cloneNumsItems();
		self._setInitialPosition();
		self._setVisibleState();
		self._setReadyState();

		self._bindUI();
	}

};


var ImOverview = {

	_state: {
		isUserActivityHandled: false,
		currIndex: null
	},

	_initImagerJs: function () {
		new Imager('#im-overview .im-overview__bg__image img', { 
			availableWidths: [600, 1000], 
			availablePixelRatios: [1, 2],
			onImagesReplaced: function () {
				$(this.selector).each(function () {
					var src = $(this).attr('src');
					$(this).parent().css({ 'background-image': 'url(' + src + ')' });
				});
			}
		});
	},

	_startVideoLoading: function () {
		var self = this;

		$('#im-overview video').each(function () {
			$(this)[0].load();
		});
	},

	_handleUserActivity: function (e) {
		var self = e.data.self;

		if ( self._state.isUserActivityHandled ) return;
		if ( !Modernizr.video || Modernizr.lowbandwidth ) return;

		self._state.isUserActivityHandled = true;
		setTimeout(self._startVideoLoading.bind(self), 100);
	},

	_handleCanPlayEvent: function (e) {
		var self = e.data.self;

		objectFitPolyfill(this);
		$(this).addClass('_active');
		$(this)[0].play()
	},

	_handleLinkClick: function (e) {
		var self = e.data.self;

		e.preventDefault();
		
		var nextIndex = $(this).closest('.im-overview__nav__item').index();
		var currIndex = self._state.currIndex;

		if (nextIndex == currIndex) return;

		var $_ = $('#im-overview');

		// set active nav item
		var $navItems = $_.find('.im-overview__nav__item');
		$navItems.eq(currIndex).removeClass('_active');
		$navItems.eq(nextIndex).addClass('_active');

		// set active about item
		var $aboutItems = $_.find('.im-overview__about__item');
		$aboutItems.eq(currIndex).removeClass('_active');
		$aboutItems.eq(nextIndex).addClass('_active');

		// collapse bodies
		var $navBodies = $_.find('.im-overview__nav__body');
		$navBodies.eq(currIndex).collapse('hide');
		$navBodies.eq(nextIndex).collapse('show');

		// set active bg item
		var $bgItems = $_.find('.im-overview__bg__item');
		if (nextIndex > currIndex) {
			// slide down
			var nextStartPos = -80;
			var currEndPos = 0;
		} else {
			// slide up
			var nextStartPos = 0;
			var currEndPos = -80;
		}

		$bgItems.eq(nextIndex).removeClass('_animate').css({
			transform: 'translateY(' + nextStartPos + 'px)',
			opacity: 0
		});

		setTimeout(function () {

			$bgItems.eq(currIndex).css({
				transform: 'translateY(' + currEndPos + 'px)',
				opacity: 0
			});

			$bgItems.eq(nextIndex).addClass('_animate').css({
				transform: 'translateY(-40px)',
				opacity: 1
			});

		}, 20);

		

		self._state.currIndex = nextIndex;
		
	},

	_bindUI: function () {
		var self = this;

		$('.im-overview__bg__video').on('canplaythrough', {self: self}, self._handleCanPlayEvent);
		$(document).one('click touchstart', {self: self}, self._handleUserActivity);
		$(document).on('click', '.im-overview__nav__link', {self: self}, self._handleLinkClick);
	},

	init: function () {
		var self = this;

		if ( $('#im-overview').length == 0 ) return;

		self._initImagerJs();
		self._bindUI();

		$('body').trigger('click');
	}

};

var ImSlider = {

	_state: {
		currView: 'lines',
		isUserActivityHandled: false,
		maxListWidth: null,
		maxScrollLeft: null,
		lastRangeValue: null
	},

	_switchToGantView: function () {
		var self = this;

		// to add some random (but repeatable) effect to items 
		var widthFactors = Array(15).join('1.0|1.3|1.0|1.2|1.0|1.2|1.3|1.1|1.2|').split('|');
		var leftFactors  = ('0.8|0.1|0.5|' + Array(15).join('0.3|0.4|0.4|0.3|0.3|0.5|0.4|0.3|0.3|')).split('|');

		// prepare items to walk one by one and put into lines
		var items = _getSortedListOfItems();
		
		// get dimentions for items positions calculation
		var itemsHeight = $(items[0]).outerHeight();
		var itemsWidth  = $(items[0]).outerWidth();
		var currSceneHeight = $('#im-slider .im-slider__scene').height();
		var gantSceneHeight = 600;
		var linesCount  = 3;
		var linesHeight = Math.round(gantSceneHeight / linesCount);

		// place, where the length of the line will be saved
		var linesEdges = [0, 0, 0];

		// calculate items positions and sizes
		for (var i = 0, l = items.length; i < l; i++) {
			var lineIndex = _getShortestLineIndex();

			// get item's position in 'lines' view
			var $scrollBox = $('#im-slider .im-slider__scroll');
			var currTop    = parseInt($(items[i]).offset().top - $scrollBox.offset().top);
			var currLeft   = parseInt($(items[i]).offset().left + $scrollBox.scrollLeft());

			// get item's position in 'gant' view
			var gantTop    = lineIndex * linesHeight + 20;
			var gantWidth  = itemsWidth * widthFactors[i];
			var gantLeft   = linesEdges[lineIndex] + leftFactors[i] * itemsWidth;
			linesEdges[lineIndex] = gantLeft + gantWidth;

			// get item's transform value
			var topOffset  = gantTop - currTop;
			var leftOffset = gantLeft - currLeft;
			var transform  = 'translate3d(' + leftOffset + 'px,' + topOffset + 'px,0)';

			$(items[i]).find('.im-slider__item__body').css({
				transform: transform,
				width: gantWidth
			});
			
		}

		// change styles to gant mode
		$('#im-slider .im-slider__scene').height(gantSceneHeight);
		$('#im-slider').addClass('im-slider--gant-view');

		function _getSortedListOfItems() {

			// group by list
			var lists = [];
			var itemsCounter = 0;

			$('#im-slider .im-slider__list').each(function () {
				var items = $.makeArray($(this).find('.im-slider__item')).reverse();
				itemsCounter += items.length;
				lists.push(items);
			});

			// take from each list
			var items = [];
			var viewed = 0;
			while (viewed < itemsCounter) {
				lists.forEach(function (list) {
					if (list.length == 0) return;
					items.push(list.pop())
					viewed++;
				});
			};

			return items;
		}

		function _getShortestLineIndex() {
			var minLength = Infinity;
			var lineIndex = 0;

			linesEdges.forEach(function (value, index) {
				if (value < minLength) {
					minLength = value;
					lineIndex = index;
				}
			});

			return lineIndex;
		}

		function _getLongestLineIndex() {
			var maxLength = 0;
			var lineIndex = 0;

			linesEdges.forEach(function (value, index) {
				if (value > maxLength) {
					maxLength = value;
					lineIndex = index;
				}
			});

			return lineIndex;
		}

		function _isPositionInViewport(left) {
			return left - $scrollBox.scrollLeft() < $(window).width();
		}

	},

	_switchToLinesView: function () {
		var self = this;

		$('#im-slider .im-slider__scene').height('auto');
		$('#im-slider .im-slider__item__body').attr('style', '');
		$('#im-slider').removeClass('im-slider--gant-view');

	},

	_calcDimensions: function () {
		var self = this;

		self._state.maxListWidth = self._getMaxListWidth();
		self._state.maxScrollLeft = self._getMaxScrollLeft();
	},

	_getMaxListWidth: function () {
		var self = this;

		var maxWidth = 0;
		$('#im-slider .im-slider__list').each(function () {
			var $lastItem = $(this).find('.im-slider__item').last();
			var listOffset = $(this).offset().left;
			var itemOffset = $lastItem.offset().left;
			var itemWidth = $lastItem.width();
			var listWidth = itemOffset - listOffset + itemWidth;
			maxWidth = Math.max(maxWidth, listWidth);
		});
		return maxWidth;
	},

	_getMaxScrollLeft: function () {
		var $scrollBox = $('#im-slider .im-slider__scroll');
		var currScrollLeft = $scrollBox.scrollLeft();
		$scrollBox.scrollLeft(100000);
		var maxScrollLeft = $scrollBox.scrollLeft();
		$scrollBox.scrollLeft(currScrollLeft);
		return maxScrollLeft;
	},

	_setGridLinesWidth: function () {
		var self = this;

		$('#im-slider .im-slider__line').width(self._state.maxListWidth);
	},

	_initImagerJs: function () {
		new Imager('#im-slider .im-slider__bg__image img', { 
			availableWidths: [600, 1000], 
			availablePixelRatios: [1, 2],
			onImagesReplaced: function () {
				$(this.selector).each(function () {
					var src = $(this).attr('src');
					$(this).parent().css({ 'background-image': 'url(' + src + ')' });
				});
			}
		});
	},

	_initRangeSlider: function () {
		var self = this;

		var $range = $('#im-slider .im-slider__range');
		$range.find('input').rangeslider({
			polyfill: false,
			onInit: function () {
				$range.find('.rangeslider__handle').html('<i></i><i></i><i></i>');
			},
			onSlide: _.throttle(function(position, value) {
				if (value == self._state.lastRangeValue) return;
				self._state.lastRangeValue = value;
				
				var isHandleActive = $range.find('.rangeslider').hasClass('rangeslider--active');
				if (!isHandleActive) return;

				var scrollLeft = self._state.maxScrollLeft / 1000 * value; 
				$('#im-slider .im-slider__scroll').scrollLeft(scrollLeft);
			}, 50)
		});

	},

	_startVideoLoading: function () {
		var self = this;

		$('#im-slider video').each(function () {
			$(this)[0].load();
		});
	},

	_handleUserActivity: function (e) {
		var self = e.data.self;

		if ( self._state.isUserActivityHandled ) return;
		if ( !Modernizr.video || Modernizr.lowbandwidth ) return;

		self._state.isUserActivityHandled = true;
		setTimeout(self._startVideoLoading.bind(self), 100);
	},

	_handleCanPlayEvent: function (e) {
		var self = e.data.self;

		objectFitPolyfill(this);
		$(this).addClass('_active');
	},

	_handleMouseOver: function (e) {
		var self = e.data.self;

		var $video = $(this).find('video._active');
		if ($video.length) {
			$video[0].play();
		}
	},

	_handleMouseOut: function (e) {
		var self = e.data.self;

		var $video = $(this).find('video._active');
		if ($video.length) {
			$video[0].pause();
		}
	},

	_handleWindowResize: function (e) {
		var self = e.data.self;

		self._calcDimensions();
		self._setGridLinesWidth();
	},

	_handleSliderScroll: function (e) {
		var self = e.data.self;

		var scrollLeft = $('#im-slider .im-slider__scroll').scrollLeft();
		var rangeValue = Math.round(1000 * scrollLeft / self._state.maxScrollLeft);
		$('#im-slider .im-slider__range input').val(rangeValue).change();
	},

	_handleToggleButton: function (e) {
		var self = e.data.self;

		if (self._state.currView == 'lines') {
			self._switchToGantView();
			self._state.currView = 'gant';
		} else {
			self._switchToLinesView();
			self._state.currView = 'lines';
		}
	},

	_bindUI: function () {
		var self = this;

		$('.im-slider__scroll').on('scroll', {self: self}, _.throttle(self._handleSliderScroll, 50));
		$('.im-slider__bg__video').on('canplaythrough', {self: self}, self._handleCanPlayEvent);
		$(document).one('click touchstart', {self: self}, self._handleUserActivity);
		$(document).on('mouseover', '.im-slider__item', {self: self}, self._handleMouseOver);
		$(document).on('mouseout', '.im-slider__item', {self: self}, self._handleMouseOut);
		$(document).on('click', '.im-slider__toggle', {self: self}, self._handleToggleButton);
		$(window).on('resize orientationchange', {self: self}, self._handleWindowResize);
	},

	init: function () {
		var self = this;

		if ( $('#im-slider').length == 0 ) return;

		self._calcDimensions();
		self._setGridLinesWidth();
		self._initRangeSlider();
		self._initImagerJs();
		self._bindUI();

		$('body').trigger('click');
	}

};

var ImHeader = {


	_adjustMoreItem: function () {
		var self = this;

		var $_ = $('#im-header');

		// close dropdown during resizing
		var $more = $_.find('.im-header__menu__item--more');
		$more.removeClass('--opened');

		// compare container & items top offsets and find break point
		var $crop  = $_.find('.im-header__menu__crop');
		var cropOffset = $crop.offset().top;
		var $items = $crop.find('.im-header__menu__item');
		var lastIndex = 0;

		$items.each(function (index) {
			var itemOffset = $(this).offset().top;
			if (itemOffset == cropOffset) {
				lastIndex = index;
			}
		});

		// show 'more', if lastIndex less than maxIndex
		var $lastItem = $items.eq(lastIndex);
		var maxIndex = $items.length - 1;

		if (lastIndex < maxIndex) {

			// show 'more' and position it
			var lastItemLeft = $lastItem.offset().left - $crop.offset().left;
			var lastItemMargin = parseInt($lastItem.css('margin-right'));
			var lastItemWidth = $lastItem.width();

			var moreOffset = lastItemLeft + lastItemMargin + lastItemWidth;
			$more.addClass('--active').css({ left: moreOffset + 'px'});

			// show/hide 'more' elements
			var $moreItems = $_.find('.im-header__menu__down__body > div');
			$moreItems.each(function (index) {
				if (index > lastIndex) {
					$(this).show();
				} else {
					$(this).hide();
				}
			});

		} else {
			$more.removeClass('--active');
		}

	},

	_handleMoreClick: function (e) {
		var self = e.data.self;

		e.preventDefault();

		$('#im-header .im-header__menu__item--more').toggleClass('--opened');
	},

	_handleDocumentClick: function (e) {
		var self = e.data.self;

		var moreSelector = '.im-header__menu__item--more';
		if ( $(e.target).closest(moreSelector).length == 0 ){
			$('#im-header ' + moreSelector).removeClass('--opened');
		}
	},

	_handleWindowResize: function (e) {
		var self = e.data.self;

		self._adjustMoreItem();
	},

	_bindUI: function () {
		var self = this;

		$(document).on('click', {self: self}, self._handleDocumentClick);
		$(document).on('click', '.im-header__menu__item--more > a', {self: self}, self._handleMoreClick);
		$(window).on('resize orientationchange', {self: self}, self._handleWindowResize);
	},

	init: function () {
		var self = this;

		if ( $('#im-header').length == 0) return;

		self._adjustMoreItem();
		self._bindUI();
	}
}

var ImNews = {

	_state: {
		sly: null,
		maxIndex: null,
		currIndex: 0
	},

	_setSliderWidth: function () {
		var self = this;

		var $wrapper = $('#im-wrapper');
		var $slider  = $('#im-news .im-news__slider');
		var wrapperOffset = $wrapper.offset().left;
		var wrapperWidth = $wrapper.width();
		var sliderOffset = $slider.offset().left;
		var sliderWidth = wrapperWidth- (sliderOffset - wrapperOffset);
		$slider.width(sliderWidth);
	},

	_initSlider: function () {
		var self = this;

		var $_ = $('#im-news');
		var $slider  = $_.find('.im-news__slider');
		var $prevBtn = $_.find('.im-digits__prev');
		var $nextBtn = $_.find('.im-digits__next');

		self._state.maxIndex = $_.find('.im-news__item').length - 1;
		self._state.sly = new Sly($slider[0], {
			horizontal: 1,
			itemNav: 'basic',
			speed: 300,
			mouseDragging: 1,
			touchDragging: 1,
			releaseSwing: true
		}).init();

	},

	_handleNextButton: function (e) {
		var self = e.data.self;

		e.preventDefault();

		var currIndex = self._state.currIndex;
		var nextIndex = currIndex + 1;
		if (nextIndex > self._state.maxIndex) return;

		self._state.sly.toStart(++self._state.currIndex);
	},

	_handlePrevButton: function (e) {
		var self = e.data.self;

		e.preventDefault();

		var currIndex = self._state.currIndex;
		var nextIndex = currIndex - 1;
		if (nextIndex < 0) return;

		self._state.sly.toStart(--self._state.currIndex);
	},

	_handleWindowResize: function (e) {
		var self = e.data.self;

		self._setSliderWidth();
		self._state.sly.reload();
	},

	_handleMoveEnd: function () {
		var self = this;

	},

	_bindUI: function () {
		var self = this;

		$(window).on('resize orientationchange', {self: self}, self._handleWindowResize);
		$(document).on('click', '#im-news .im-digits__next', {self: self}, self._handleNextButton);
		$(document).on('click', '#im-news .im-digits__prev', {self: self}, self._handlePrevButton);
		self._state.sly.on('moveEnd', self._handleMoveEnd.bind(self));
	},

	init: function () {
		var self = this;

		if ( $('#im-news').length == 0 ) return;

		self._setSliderWidth();
		self._initSlider();
		self._bindUI();
	}
};
var App = {

	_isFontsReady: function () {
		return $('html').hasClass('wf-active');
	},

	_handleDOMReady: function () {
		var self = this;

		var timer = setInterval(function () {
			if ( self._isFontsReady() ) {
				clearInterval(timer);

				// init modules here
				ImDigits.init();
				ImOverview.init();
				ImSlider.init();
				ImHeader.init();
				ImNews.init();

				if (getScrollbarWidth() == 0) {
					$("html").addClass('hidden-scrollbar');
				}
			}
		}, 20);
	},

	_bindUI: function () {
		var self = this;

		$(document).ready(self._handleDOMReady.bind(self));
	},

	init: function () {
		var self = this;

		self._bindUI();
	}
};

App.init();