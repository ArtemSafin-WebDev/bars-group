/*!
 * THIS FILE IS GENERATED BY GULP PROJECT. 
 * NEVER CHANGE IT MANUALLY, OTHERWISE YOUR CHANGES 
 * CAN BE OVERWRITTEN. 
 * 
 * @description 
 * @repository git@bitbucket.org:ildar-meyker/html-barsgroup.git
 */

(function () {

	var iOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;

	if (!iOS) return;

	function appendStyle(styles) {
	  var css = document.createElement('style');
	  css.type = 'text/css';

	  if (css.styleSheet) css.styleSheet.cssText = styles;
	  else css.appendChild(document.createTextNode(styles));

	  document.getElementsByTagName("head")[0].appendChild(css);
	}

	var styles = '* {cursor: pointer; }';

	window.onload = function() { appendStyle(styles) };

})();


var Overview = {

	_elems: {
		$_: $(),
		$bgItems: $(),
		$aboutItems: $(),
		$navItems: $(),
		$navBodies: $()
	},

	_state: {
		currIndex: 0
	},

	_handleLinkClick: function (e) {
		var self = e.data.self;

		e.preventDefault();
		
		var nextIndex = $(this).closest('.overview__nav__item').index();
		var currIndex = self._state.currIndex;

		if (nextIndex == currIndex) return;

		// set active nav item
		self._elems.$navItems.eq(currIndex).removeClass('--active');
		self._elems.$navItems.eq(nextIndex).addClass('--active');

		// set active about item
		self._elems.$aboutItems.eq(currIndex).removeClass('--active');
		self._elems.$aboutItems.eq(nextIndex).addClass('--active');

		// collapse bodies
		self._elems.$navBodies.eq(currIndex).collapse('hide');
		self._elems.$navBodies.eq(nextIndex).collapse('show');

		// set active bg item
		if (nextIndex > currIndex) {
			// slide down
			var nextStartPos = -80;
			var currEndPos = 0;
		} else {
			// slide up
			var nextStartPos = 0;
			var currEndPos = -80;
		}

		self._elems.$bgItems.eq(nextIndex)
			.addClass('overview__bg__item--frozen')
			.css({
				transform: 'translateY(' + nextStartPos + 'px)',
				opacity: 0
			});

		setTimeout(function () {

			self._elems.$bgItems.eq(currIndex)
				.css({
					transform: 'translateY(' + currEndPos + 'px)',
					opacity: 0
				});

			self._elems.$bgItems.eq(nextIndex)
				.removeClass('overview__bg__item--frozen')
				.css({
					transform: 'translateY(-40px)',
					opacity: 1
				});

		}, 20);

		self._state.currIndex = nextIndex;
	},

	_bindUI: function () {
		var self = this;

		self._elems.$_.on('click', '.overview__nav__link', {self: self}, self._handleLinkClick);
	},

	init: function () {
		var self = this;

		var $_ = $('#overview');

		if ( $_.length == 0 ) return;

		self._elems.$_ = $_;
		self._elems.$bgItems = self._elems.$_.find('.overview__bg__item');
		self._elems.$aboutItems = self._elems.$_.find('.overview__about__item');
		self._elems.$navItems = self._elems.$_.find('.overview__nav__item');
		self._elems.$navBodies = self._elems.$_.find('.overview__nav__body');

		self._bindUI();
	}

};

var GanttSlider = {

	_cache: {
		gantt: {}
	},
	
	_elems: {
		$_: $(),
		$sandbox: $(),
		$inner: $(),
		$scroll: $(),
		$canvas: $(),
		$types: $(),
		$lines: $(),
		$items: $(),
		$ctrl: $(),
		$range: $(),
		$itemClone: $(),
		$typeClone: $()
	},

	_state: {
		currentView: 'gantt',
		groupedItems: [],
		randomItems: [],
		maxScrollLeft: 0,
		lastRangeValue: 0,
		lastScrollTop: 0,
		timeout: null
	},

	_getGanttPattern: function (width, height) {
		var self = this;

		// imagine, that we have some picture, which contains 7 rectangles.
		// pattern object properties describe how we can draw the picture
		var PATTERN = {
			canvasWidth: 2440,
			canvasHeight: 600,
			rectWidth: 510,
			rectHeight: 160,
			coords: [ [60, 310], [355, 25], [775, 200], [1070, 370], [1435, 100], [1760, 410], [2115, 120] ]
		};

		// items' width and height will change on different screen sizes
		// so we need to have a pattern suitable for new item's dimensions
		var result = {};
		result.canvasWidth = parseInt(PATTERN.canvasWidth / PATTERN.rectWidth * width);
		result.canvasHeight = parseInt(PATTERN.canvasHeight / PATTERN.rectHeight * height);
		result.coords = [];
		PATTERN.coords.forEach(function (coord) {
			result.coords.push([
				parseInt(coord[0] / PATTERN.canvasWidth * result.canvasWidth),
				parseInt(coord[1] / PATTERN.canvasHeight * result.canvasHeight)
			]);
		});

		return result;
	},

	// create elems clone to get their dimenstions
	_createElemsClones: function () {
		var self = this;

		var $itemClone = self._elems.$items.eq(0).clone();
		$itemClone.appendTo(self._elems.$sandbox);
		self._elems.$itemClone = $itemClone;

		var $typeClone = self._elems.$types.eq(0).clone();
		$typeClone.appendTo(self._elems.$sandbox);
		self._elems.$typeClone = $typeClone;
	},

	_sortItemsByGroup: function () {
		var self = this;

		var groupedItems = [];
		self._elems.$items.each(function (index, item) {
			var id = $(item).data('rel');
			if (typeof groupedItems[id] === 'undefined') groupedItems[id] = [];
			groupedItems[id].push(item);
		});
		self._state.groupedItems = groupedItems;
	},

	// picks items from different groups and puts them into one array
	_sortItemsRandomly: function () {
		var self = this;

		var totalCount = 0;
		var helperArray = [];
		self._state.groupedItems.forEach(function (items, index) {
			helperArray[index] = items.slice().reverse();
			totalCount += items.length;
		});

		var randomItems = [];
		var viewedCount = 0;
		while (viewedCount < totalCount) {
			helperArray.forEach(function (items) {
				if (items.length == 0) return;
				randomItems.push(items.pop())
				viewedCount++;
			});
		};

		self._state.randomItems = randomItems;
	},

	_getGanttViewCalcs: function () {
		var self = this;

		// get vars for cacheId
		var itemWidth = self._elems.$itemClone.outerWidth();
		var itemHeight = self._elems.$itemClone.outerHeight();

		var cacheId = itemWidth + 'x' + itemHeight;
		if ( !self._cache.gantt[cacheId] ) {

			var result = {
				canvas: {},
				items: []
			};

			// save items positions
			var pattern = self._getGanttPattern(itemWidth, itemHeight);
			var maxLeftPos = 0;

			self._state.randomItems.forEach(function (item, index) {
				var baseIndex = index % pattern.coords.length;
				var factor = Math.floor(index / pattern.coords.length);

				var leftPos = pattern.coords[baseIndex][0] + pattern.canvasWidth * factor;
				var topPos = pattern.coords[baseIndex][1];

				result.items[index] = {
					left: leftPos,
					top: topPos
				};

				if (leftPos > maxLeftPos) maxLeftPos = leftPos;
			});

			// save canvas size
			result.canvas.width = maxLeftPos + itemWidth + pattern.coords[0][0];
			result.canvas.height = pattern.canvasHeight;

			self._cache.gantt[cacheId] = result;
		}

		return self._cache.gantt[cacheId];
	},

	_switchToGanttView: function () {
		var self = this;

		self._elems.$_.addClass('gantt-slider--gantt-view');
		self._elems.$sandbox.addClass('gantt-slider--gantt-view');
		
		var calcs = self._getGanttViewCalcs();		

		// set items positions
		self._state.randomItems.forEach(function (item, index) {
			$(item).css({ 
				left: calcs.items[index].left, 
				top: calcs.items[index].top 
			});
		});

		// set canvas size
		self._elems.$canvas.css({
			width: calcs.canvas.width,
			height: calcs.canvas.height
		});


		self._state.currentView = 'gantt';
		self._updateScrollCalcs();
	},

	_switchToLinesView: function () {
		var self = this;

		self._elems.$_.removeClass('gantt-slider--gantt-view');
		self._elems.$sandbox.removeClass('gantt-slider--gantt-view');

		// inner offset
		var innerOffset = parseInt(self._elems.$inner.css('padding-left'));

		// get item dimentions
		var itemWidth = self._elems.$itemClone.outerWidth();
		var itemHeight = self._elems.$itemClone.outerHeight();
		var itemOffsetY = parseInt(self._elems.$itemClone.css('margin-bottom')); 
		var itemOffsetX = parseInt(self._elems.$itemClone.css('margin-right')); 

		// get type dimensions
		var typeWidth = self._elems.$typeClone.width();

		// get start pos
		var centerStart = self._elems.$ctrl.offset().left;

		var lineCounter = 0;
		var maxLeftPos = 0;
		var maxTopPos = 0;

		self._state.groupedItems.forEach(function (items, index) {
			var topPos = lineCounter * (itemHeight + itemOffsetY);

			// items
			items.forEach(function (item, index) {
				var leftPos = centerStart + typeWidth + index * (itemWidth + itemOffsetX);
				$(item).css({ top: topPos, left: leftPos });

				if (leftPos > maxLeftPos) maxLeftPos = leftPos;
			});

			// types
			self._elems.$types.filter('[data-rel="' + index + '"]').css({
				top: topPos,
				left: centerStart
			});

			// lines
			self._elems.$lines.filter('[data-rel="' + index + '"]').css({
				top: topPos,
				left: centerStart
			});

			if (topPos > maxTopPos) maxTopPos = topPos;
			lineCounter++;
		});

		// set lines size 
		self._elems.$lines.css({
			width: maxLeftPos + itemWidth - centerStart
		});

		// set canvas size
		self._elems.$canvas.css({
			width: maxLeftPos + itemWidth + innerOffset,
			height: maxTopPos + itemHeight + itemOffsetY
		});

		self._state.currentView = 'lines';
		self._updateScrollCalcs();
	},

	_updateScrollCalcs: function () {
		var self = this;

		// update maxScrollLeft
		var maxScrollLeft = self._elems.$canvas.width() - $(window).width();
		self._elems.$range.toggleClass('gantt-slider__range--hidden', maxScrollLeft < 0);
		self._state.maxScrollLeft = maxScrollLeft;

		// update handle position
		self._updateHandlePosition();
	},

	_updateHandlePosition: function () {
		var self = this;

		var scrollLeft = self._elems.$scroll.scrollLeft();
		var rangeValue = Math.round(1000 * scrollLeft / self._state.maxScrollLeft);
		self._elems.$range.find('input').val(rangeValue).change();
	},

	_initRangeSlider: function () {
		var self = this;

		var $rangeslider = $();

		self._elems.$range.find('input').rangeslider({
			polyfill: false,
			onInit: function () {
				$rangeslider = self._elems.$range.find('.rangeslider');
				$rangeslider.find('.rangeslider__handle').html('<i></i><i></i><i></i>');
			},
			onSlide: function(position, value) {
				if (value == self._state.lastRangeValue) return;
				self._state.lastRangeValue = value;
				
				var isHandleActive = $rangeslider.hasClass('rangeslider--active');
				if (!isHandleActive) return;

				var scrollLeft = self._state.maxScrollLeft / 1000 * value; 
				self._elems.$scroll.scrollLeft(scrollLeft);
			}
		});

	},

	_handleWindowResize: function (e) {
		var self = e.data.self;

		switch (self._state.currentView) {
			case 'gantt': 
				self._switchToGanttView();
			break;
			case 'lines': 
				self._switchToLinesView();
			break;
		}
	},

	_handleToggleButton: function (e) {
		var self = e.data.self;

		e.preventDefault();

		switch (self._state.currentView) {
			case 'gantt': 
				self._switchToLinesView();
			break;
			case 'lines': 
				self._switchToGanttView();
			break;
		}
	},

	_handleSliderScroll: function (e) {
		var self = this;

		self._updateHandlePosition();
	},

	_handleWindowScroll: function (e) {
		var self = this;

		if (!Modernizr.requestanimationframe) return;
		if (!Modernizr.hiddenscroll) return;
		if (self._state.currentView != 'gantt') return;

		if (self._state.timeout) {
			window.cancelAnimationFrame(self._state.timeout);
		}

		self._state.timeout = window.requestAnimationFrame(function () {
			var scrollTop  = $(window).scrollTop();
			var delta  = self._state.lastScrollTop - scrollTop;
			scrollLeft = self._elems.$scroll.scrollLeft() - delta;
			self._elems.$scroll.scrollLeft(scrollLeft)
			self._state.lastScrollTop = scrollTop;
		});
	},

	_handleItemMouseenter: function (e) {
		var self = e.data.self;

		var $video = $(this).find('video.--active');
		if ($video.length) $video[0].play();
	},

	_handleItemMouseleave: function (e) {
		var self = e.data.self;

		var $video = $(this).find('video.--active');
		if ($video.length) $video[0].pause();
	},

	_bindUI: function () {
		var self = this;

		self._elems.$_.on('mouseenter', '.gantt-slider__item', {self: self}, self._handleItemMouseenter);
		self._elems.$_.on('mouseleave', '.gantt-slider__item', {self: self}, self._handleItemMouseleave);
		self._elems.$_.on('click', '.gantt-slider__toggle', {self: self}, self._handleToggleButton);
		self._elems.$scroll[0].addEventListener('scroll', self._handleSliderScroll.bind(self), false);
		$(window).on('resize', {self: self}, self._handleWindowResize);
		window.addEventListener('scroll', self._handleWindowScroll.bind(self), false);
	},

	init: function () {
		var self = this;

		var $_ = $('#gantt-slider');
		if ( $_.length == 0 ) return;
		
		self._elems.$_ = $_;
		self._elems.$sandbox = $('#gantt-slider-sandbox');
		self._elems.$inner = $_.find('.page__inner').first();
		self._elems.$scroll = $_.find('.gantt-slider__scroll');
		self._elems.$canvas = $_.find('.gantt-slider__canvas');
		self._elems.$types = $_.find('.gantt-slider__type');
		self._elems.$lines = $_.find('.gantt-slider__line');
		self._elems.$items = $_.find('.gantt-slider__item');
		self._elems.$ctrl = $_.find('.gantt-slider__ctrl');
		self._elems.$range = $_.find('.gantt-slider__range');

		self._createElemsClones();
		self._sortItemsByGroup();
		self._sortItemsRandomly();
		self._switchToGanttView();
		self._initRangeSlider();

		self._elems.$_.removeClass('gantt-slider--frozen --loading');

		self._bindUI();
	}

};

var CitiesSlider = {

	_cache: {
		gantt: {}
	},
	
	_elems: {
		$_: $(),
		$sandbox: $(),
		$scroll: $(),
		$canvas: $(),
		$items: $(),
		$ctrl: $(),
		$range: $(),
		$itemClone: $()
	},

	_state: {
		maxScrollLeft: 0,
		lastRangeValue: 0,
		lastZIndex: 50,
		lastScrollTop: 0,
		timeout: null
	},

	_getGanttPattern: function (width, height) {
		var self = this;

		// imagine, that we have some picture, which contains 7 rectangles.
		// pattern object properties describe how we can draw the picture
		var PATTERN = {
			canvasWidth: 2440,
			canvasHeight: 600,
			rectWidth: 510,
			rectHeight: 160,
			coords: [ [60, 310], [355, 25], [775, 200], [1070, 370], [1435, 100], [1760, 410], [2115, 120] ]
		};

		// items' width and height will change on different screen sizes
		// so we need to have a pattern suitable for new item's dimensions
		var result = {};
		result.canvasWidth = parseInt(PATTERN.canvasWidth / PATTERN.rectWidth * width);
		result.canvasHeight = parseInt(PATTERN.canvasHeight / PATTERN.rectHeight * height);
		result.coords = [];
		PATTERN.coords.forEach(function (coord) {
			result.coords.push([
				parseInt(coord[0] / PATTERN.canvasWidth * result.canvasWidth),
				parseInt(coord[1] / PATTERN.canvasHeight * result.canvasHeight)
			]);
		});

		return result;
	},

	// create elems clone to get their dimenstions
	_createElemsClones: function () {
		var self = this;

		var $itemClone = self._elems.$items.eq(0).clone();
		$itemClone.appendTo(self._elems.$sandbox);
		self._elems.$itemClone = $itemClone;
	},

	_getGanttViewCalcs: function () {
		var self = this;

		// get vars for cacheId
		var itemWidth  = self._elems.$itemClone.outerWidth();
		var itemHeight = self._elems.$itemClone.outerHeight();

		var cacheId = itemWidth + 'x' + itemHeight;
		if ( !self._cache.gantt[cacheId] ) {

			var result = {
				canvas: {},
				items: []
			};

			// save items positions
			var pattern = self._getGanttPattern(itemWidth, itemHeight);
			var maxLeftPos = 0;

			self._elems.$items.each(function (index, item) {
				var baseIndex = index % pattern.coords.length;
				var factor = Math.floor(index / pattern.coords.length);

				var leftPos = pattern.coords[baseIndex][0] + pattern.canvasWidth * factor;
				var topPos = pattern.coords[baseIndex][1];

				result.items[index] = {
					left: leftPos,
					top: topPos
				};

				if (leftPos > maxLeftPos) maxLeftPos = leftPos;
			});

			// save canvas size
			result.canvas.width = maxLeftPos + itemWidth + pattern.coords[0][0];
			result.canvas.height = pattern.canvasHeight;

			self._cache.gantt[cacheId] = result;
		}

		return self._cache.gantt[cacheId];
	},

	_setItemsPositions: function () {
		var self = this;
		
		var calcs = self._getGanttViewCalcs();		
		var canvasMiddle = calcs.canvas.height / 2;
		var itemHeight = self._elems.$itemClone.outerHeight();

		// set items positions
		self._elems.$items.each(function (index, item) {

			if ( calcs.items[index].top > canvasMiddle ) {
				$(item).css({ 
					left: calcs.items[index].left, 
					bottom: calcs.canvas.height - itemHeight - calcs.items[index].top,
					top: 'auto'
				});
			} else {
				$(item).css({ 
					left: calcs.items[index].left, 
					top: calcs.items[index].top,
					bottom: 'auto'
				});
			}

			
		});

		// set canvas size
		self._elems.$canvas.css({
			width: calcs.canvas.width,
			height: calcs.canvas.height
		});

		self._updateScrollCalcs();
	},

	_updateScrollCalcs: function () {
		var self = this;

		// update maxScrollLeft
		var maxScrollLeft = self._elems.$canvas.width() - $(window).width();
		self._elems.$range.toggleClass('cities-slider__range--hidden', maxScrollLeft < 0);
		self._state.maxScrollLeft = maxScrollLeft;

		// update handle position
		self._updateHandlePosition();
	},

	_updateHandlePosition: function () {
		var self = this;

		var scrollLeft = self._elems.$scroll.scrollLeft();
		var rangeValue = Math.round(1000 * scrollLeft / self._state.maxScrollLeft);
		self._elems.$range.find('input').val(rangeValue).change();
	},

	_initRangeSlider: function () {
		var self = this;

		var $rangeslider = $();

		self._elems.$range.find('input').rangeslider({
			polyfill: false,
			onInit: function () {
				$rangeslider = self._elems.$range.find('.rangeslider');
				$rangeslider.find('.rangeslider__handle').html('<i></i><i></i><i></i>');
			},
			onSlide: function(position, value) {
				if (value == self._state.lastRangeValue) return;
				self._state.lastRangeValue = value;
				
				var isHandleActive = $rangeslider.hasClass('rangeslider--active');
				if (!isHandleActive) return;

				var scrollLeft = self._state.maxScrollLeft / 1000 * value; 
				self._elems.$scroll.scrollLeft(scrollLeft);
			}
		});

	},

	_handleSliderScroll: function (e) {
		var self = this;

		self._updateHandlePosition();
	},

	_handleItemMouseenter: function (e) {
		var self = e.data.self;

		$(this).find('.cities-slider__item__collapse').stop().slideDown();
		$(this).css({ 'z-index': ++self._state.lastZIndex });
	},

	_handleItemMouseleave: function (e) {
		var self = e.data.self;

		$(this).find('.cities-slider__item__collapse').stop().slideUp();
	},

	_handleWindowResize: function (e) {
		var self = e.data.self;

		self._setItemsPositions();
	},

	_handleWindowScroll: function (e) {
		var self = this;

		if (!Modernizr.requestanimationframe) return;
		if (!Modernizr.hiddenscroll) return;

		if (self._state.timeout) {
			window.cancelAnimationFrame(self._state.timeout);
		}

		self._state.timeout = window.requestAnimationFrame(function () {
			var scrollTop  = $(window).scrollTop();
			var delta  = self._state.lastScrollTop - scrollTop;
			scrollLeft = self._elems.$scroll.scrollLeft() - delta;
			self._elems.$scroll.scrollLeft(scrollLeft)
			self._state.lastScrollTop = scrollTop;
		});
	},

	_bindUI: function () {
		var self = this;

		self._elems.$_.on('mouseenter', '.cities-slider__item', {self: self}, self._handleItemMouseenter);
		self._elems.$_.on('mouseleave', '.cities-slider__item', {self: self}, self._handleItemMouseleave);
		$(window).on('resize', {self: self}, self._handleWindowResize);

		self._elems.$scroll[0].addEventListener('scroll', self._handleSliderScroll.bind(self), false);
		window.addEventListener('scroll', self._handleWindowScroll.bind(self), false);
	},

	init: function () {
		var self = this;

		var $_ = $('#cities-slider');
		if ( $_.length == 0 ) return;
		
		self._elems.$_ = $_;
		self._elems.$sandbox = $('#cities-slider-sandbox');
		self._elems.$scroll = $_.find('.cities-slider__scroll');
		self._elems.$canvas = $_.find('.cities-slider__canvas');
		self._elems.$items = $_.find('.cities-slider__item');
		self._elems.$ctrl = $_.find('.cities-slider__ctrl');
		self._elems.$range = $_.find('.cities-slider__range');

		self._createElemsClones();
		self._setItemsPositions();
		self._initRangeSlider();

		self._elems.$_.removeClass('cities-slider--frozen --loading');

		self._bindUI();
	}

};

var SliderContent = {

	_elems: {
		$_: $(),
		$wrapper: $(),
		$slider: $()
	},

	_handleWindowResize: function (e) {
		var self = e.data.self;

		self._elems.$slider.trigger('refresh.owl.carousel');
	},

	_handlePrevButton: function (e) {
		var self = e.data.self;

		e.preventDefault();

		self._elems.$slider.trigger('prev.owl.carousel')
	},

	_handleNextButton: function (e) {
		var self = e.data.self;

		e.preventDefault();

		self._elems.$slider.trigger('next.owl.carousel')
	},

	_bindUI: function () {
		var self = this;

		self._elems.$_.on('click', '.js-slider-content-prev', {self: self}, self._handlePrevButton);
		self._elems.$_.on('click', '.js-slider-content-next', {self: self}, self._handleNextButton);
		$(window).on('resize', {self: self}, self._handleWindowResize);
	},	

	init: function () {
		var self = this;

		var $_ = $('#slider-content');

		if ( $_.length == 0 ) return;
		if ( $('body').hasClass('is-admin') ) return;

		self._elems.$_ = $_;
		self._elems.$wrapper = $_.find('.slider-content__wrapper');
		self._elems.$slider = $_.find('.owl-carousel');

		self._elems.$slider.owlCarousel({
		    items: 1,
		    dots: false
		});
		
		self._bindUI();
	}

};

var SliderDigits = {

	_state: {
		currentIndex: null,
		touchStartX: null,
		touchStartY: null,
		animating: false
	},

	_getRealIndex: function (index) {
		var self = this;

		return index % self._getRealCount(); 
	},

	_getNumsCount: function () {
		return $('#slider-digits .slider-digits__nums__item').length;
	},

	_getRealCount: function () {
		return $('#slider-digits .slider-digits__pics__item').length;
	},

	_getDirection: function (nextIndex) {
		var self = this;

		var currentIndex = self._state.currentIndex;
		return (nextIndex > currentIndex) ? 'left' : 'right';
	},

	_setInitialPosition: function () {
		var self = this;

		var count = self._getRealCount();

		self._state.currentIndex = count;
		self._moveNumsToItem(count);
	},

	_setRightRebasePos: function () {
		var self = this;

		var count = self._getRealCount();
		var nextIndex = self._state.currentIndex - count;

		self._state.currentIndex = nextIndex;
		self._moveNumsToItem(nextIndex);
	},

	_setVisibleState: function () {
		$('#slider-digits').addClass('_visible');
	},

	_setReadyState: function () {
		setTimeout(function () {
			$('#slider-digits').addClass('_ready');
		}, 20);
	},

	_cloneNumsItems: function () {
		var self = this;

		var $_ = $('#slider-digits');
		var $numsCrop = $_.find('.slider-digits__nums__crop');
		var $numsList = $_.find('.slider-digits__nums__list');
		var $numsItem = $_.find('.slider-digits__nums__item');
		var cropWidth = $numsCrop.width();
		var listWidth = $numsList.width();
		var factor = Math.ceil(cropWidth / listWidth) + 1;

		for (var i = 0; i < factor; i++) {
			$numsItem.clone().appendTo($numsList);
		}
	},

	_slideToItem: function (index) {
		var self = this;

		if ( self._state.animating ) return;
		self._state.animating = true;

		// indexes
		var currIndex = self._state.currentIndex;
		var nextIndex = index;

		// elements
		var $_ = $('#slider-digits');
		var $numsCrop = $_.find('.slider-digits__nums__crop');
		
		var $nextNumsItem = $_.find('.slider-digits__nums__item').eq(nextIndex);
		var $nextPicsItem = $_.find('.slider-digits__pics__item').eq(self._getRealIndex(nextIndex));
		var $nextTextItem = $_.find('.slider-digits__text__item').eq(self._getRealIndex(nextIndex));
		var $nextTextValue = $nextTextItem.find('.slider-digits__text__value');
		var $nextTextDesc = $nextTextItem.find('.slider-digits__text__desc');

		var $currNumsItem = $_.find('.slider-digits__nums__item').eq(currIndex);
		var $currPicsItem = $_.find('.slider-digits__pics__item').eq(self._getRealIndex(currIndex));
		var $currTextItem = $_.find('.slider-digits__text__item').eq(self._getRealIndex(currIndex));
		var $currTextValue = $currTextItem.find('.slider-digits__text__value');
		var $currTextDesc = $currTextItem.find('.slider-digits__text__desc');

		var $aboutItem = $_.find('.slider-digits__about__item');

		// direction
		var direction = self._getDirection(index);

		$aboutItem.eq(self._getRealIndex(currIndex)).removeClass('_active');
		
		setTimeout(function () {
			$aboutItem.eq(self._getRealIndex(nextIndex)).addClass('_active');
		}, 0);

		switch (direction) {
			case 'left': 

				// create fake copy of next num item
				var $fakeNumsItem = $nextNumsItem.clone();
				var position = $nextNumsItem.offset().left - $numsCrop.offset().left;
				$fakeNumsItem.addClass('_fixed').css({'left': position}).appendTo($numsCrop);
				$nextNumsItem.addClass('_hidden');

				// get the distance we will animate
				var distance = $fakeNumsItem.offset().left - $nextTextValue.offset().left;
				
				// set next text value to start position
				$nextTextValue.css({'transform': 'translateX(' + distance + 'px)'});

				// hide things
				$currTextDesc.addClass('_fadeOutLeft');
				$currTextValue.addClass('_fadeOutLeft');

				// show things
				setTimeout(function () {
					$nextPicsItem.addClass('_active _cover _fadeInImage');
					$nextTextDesc.addClass('_fadeInRight');
					$nextTextValue.addClass('_ready').css({'transform': 'translateX(0)'});
					$nextTextItem.addClass('_active');
					$fakeNumsItem.css({'transform': 'translateX(-' + distance + 'px)'});
					self._moveNumsToItem(nextIndex);
				}, 20);

			break;
			case 'right':

				// create fake copy of next num item
				var $fakeNumsItem = $currNumsItem.clone();
				var position = $currTextValue.offset().left - $numsCrop.offset().left;
				$fakeNumsItem.addClass('_fixed').css({'left': position}).appendTo($numsCrop);
				$currNumsItem.addClass('_hidden');

				// get the distance we will animate
				var distance = $numsCrop.offset().left - $currTextValue.offset().left + 
					parseFloat($currNumsItem.css('margin-left'));

				// hide things
				$currTextDesc.addClass('_fadeOutRight');
				$currTextValue.addClass('_ready').css({'transform': 'translateX(' + distance + 'px)'});
				$fakeNumsItem.css({'transform': 'translateX(' + distance + 'px)'});
				self._moveNumsToItem(nextIndex);

				// show things
				setTimeout(function () {
					$nextPicsItem.addClass('_active _cover _fadeInImage');
					$nextTextDesc.addClass('_fadeInLeft');
					$nextTextValue.addClass('_fadeInLeft');
					$nextTextItem.addClass('_active');
				}, 20);

			break;
		}

		setTimeout(function () {

			// clear transition classes
			$currPicsItem.removeClass('_active');
			$currTextItem.removeClass('_active');
			$currTextDesc.removeClass('_fadeOutLeft _fadeOutRight');
			$currTextValue.removeClass('_ready _fadeOutLeft').attr('style', '');
			$currNumsItem.removeClass('_hidden');

			$nextPicsItem.removeClass('_cover _fadeInImage');
			$nextTextDesc.removeClass('_fadeInRight _fadeInLeft');
			$nextTextValue.removeClass('_ready _fadeInLeft').attr('style', '');
			$nextNumsItem.removeClass('_hidden');
			
			$fakeNumsItem.remove();

			// allow animating
			self._state.animating = false;
			self._state.currentIndex = nextIndex;

			// rebase, if no side clones
			self._rebaseAtEdges();
		}, 700);

	},

	_moveNumsToItem: function (index) {
		var self = this;

		// сложить ширину и отступ всех элементов до текущего 
		var $items = $('#slider-digits .slider-digits__nums__item');
		var maxIndex = Math.min(index, self._getNumsCount() - 1);
		var listOffset = 0;

		for (var i = 0; i <= maxIndex; i++) {
			listOffset += parseFloat($items.eq(i).width());
			listOffset += parseFloat($items.eq(i).css('margin-left'));
		}
		
		var $list = $('#slider-digits .slider-digits__nums__list');
		$list.css({'transform': 'translateX(-' + listOffset + 'px)'});
	},

	_rebaseAtEdges: function () {
		var self = this;

		var $_ = $('#slider-digits');
		var $numsCrop = $_.find('.slider-digits__nums__crop');
		var $numsItem = $_.find('.slider-digits__nums__item');
		var penultOffset = $numsItem .last().prev().offset().left;
		var rightEdge = $numsCrop.offset().left + $numsCrop.width();
		var currIndex = self._state.currentIndex;

		if (currIndex == 0 || penultOffset < rightEdge) {
			$('#slider-digits').removeClass('_ready');

			if (currIndex == 0) {
				self._setInitialPosition();
			} else {
				self._setRightRebasePos();
			}
			setTimeout(function () {
				$('#slider-digits').addClass('_ready');
			}, 20);
		} 
	},

	_handleNumClick: function (e) {
		var self = e.data.self;

		e.preventDefault();

		var nextIndex = $(this).index();
		self._slideToItem(nextIndex);
	},

	_handlePrevClick: function (e) {
		var self = e.data.self;

		e.preventDefault();

		var nextIndex = self._state.currentIndex - 1;
		self._slideToItem(nextIndex);
	},

	_handleNextClick: function (e) {
		var self = e.data.self;

		e.preventDefault();

		var nextIndex = self._state.currentIndex + 1;
		self._slideToItem(nextIndex);
	},

	_handleWindowResize: function (e) {
		var self = e.data.self;

		var currIndex = self._state.currentIndex;
		self._moveNumsToItem(currIndex);
	},

	_handleTouchStart: function (e) {
		var self = e.data.self;

		self._state.touchStartX = e.originalEvent.touches[0].clientX;
		self._state.touchStartY = e.originalEvent.touches[0].clientX;
	},

	_handleTouchMove: function (e) {
		var self = e.data.self;

		var touchStartX = self._state.touchStartX;
		var touchStartY = self._state.touchStartY;

		var deltaX = touchStartX - e.originalEvent.touches[0].clientX;
		var deltaY = touchStartY - e.originalEvent.touches[0].clientY;
		
		if (Math.abs(deltaX) > 100 && Math.abs(deltaX) > Math.abs(deltaY)) {
			if (deltaX > 0) {
				// swipe left
				var nextIndex = self._state.currentIndex + 1;
			} else {
				// swipe right
				var nextIndex = self._state.currentIndex - 1;
			}
			self._slideToItem(nextIndex);
		}
	},

	_bindUI: function () {
		var self = this;

		$(document).on('click', '.slider-digits__nums__item', {self: self}, self._handleNumClick);
		$(document).on('click', '#slider-digits .js-slider-digits-prev', {self: self}, self._handlePrevClick);
		$(document).on('click', '#slider-digits .js-slider-digits-next', {self: self}, self._handleNextClick);
		$(document).on('touchstart', '.slider-digits__center', {self: self}, self._handleTouchStart);
		$(document).on('touchmove', '.slider-digits__center', {self: self}, self._handleTouchMove);
		$(window).on('resize', {self: self}, self._handleWindowResize);
	},

	init: function () {
		var self = this;

		if ( $('#slider-digits').length == 0 ) return;

		self._cloneNumsItems();
		self._setInitialPosition();
		self._setVisibleState();
		self._setReadyState();

		self._bindUI();
	}

};


var SliderTabs = {

	_handleTabClick: function (e) {
		var self = e.data.self;

		e.preventDefault();

		var $_ = $(this).closest('.slider-tabs');
		
		var currIndex = $_.find('.slider-tabs__ctrl__item._active').index();
		var nextIndex = $(this).index();

		if (nextIndex == currIndex) return;

		// set active nav item
		var $navItems = $_.find('.slider-tabs__ctrl__item');
		$navItems.eq(currIndex).removeClass('_active');
		$navItems.eq(nextIndex).addClass('_active');

		// set active bg item
		var $bgItems = $_.find('.slider-tabs__pics__item');
		if (nextIndex > currIndex) {
			// slide down
			var nextStartPos = -80;
			var currEndPos = 0;
		} else {
			// slide up
			var nextStartPos = 0;
			var currEndPos = -80;
		}

		$bgItems.eq(nextIndex).removeClass('_animate').css({
			transform: 'translateY(' + nextStartPos + 'px)',
			opacity: 0
		});

		setTimeout(function () {

			$bgItems.eq(currIndex).css({
				transform: 'translateY(' + currEndPos + 'px)',
				opacity: 0
			});

			$bgItems.eq(nextIndex).addClass('_animate').css({
				transform: 'translateY(-40px)',
				opacity: 1
			});

		}, 20);

	},

	_bindUI: function () {
		var self = this;

		$(document).on('click', '.slider-tabs__ctrl__item', {self: self}, self._handleTabClick);
	},

	init: function () {
		var self = this;

		self._bindUI();
	}

};

var Header = {


	_adjustMoreItem: function () {
		var self = this;

		var $_ = $('#header');

		// close dropdown during resizing
		var $more = $_.find('.header__menu__item--more');
		$more.removeClass('--opened');

		// compare container & items top offsets and find break point
		var $crop  = $_.find('.header__menu__crop');
		var cropOffset = $crop.offset().top;
		var $items = $crop.find('.header__menu__item');
		var lastIndex = 0;

		$items.each(function (index) {
			var itemOffset = $(this).offset().top;
			if (itemOffset == cropOffset) {
				lastIndex = index;
			}
		});

		// show 'more', if lastIndex less than maxIndex
		var $lastItem = $items.eq(lastIndex);
		var maxIndex = $items.length - 1;

		if (lastIndex < maxIndex) {

			// show 'more' and position it
			var lastItemLeft = $lastItem.offset().left - $crop.offset().left;
			var lastItemMargin = parseInt($lastItem.css('margin-right'));
			var lastItemWidth = $lastItem.width();

			var moreOffset = lastItemLeft + lastItemMargin + lastItemWidth;
			$more.addClass('--shown').css({ left: moreOffset + 'px'});

			// show/hide 'more' elements
			var $moreItems = $_.find('.header__menu__down__body > div');
			$moreItems.each(function (index) {
				if (index > lastIndex) {
					$(this).show();
				} else {
					$(this).hide();
				}
			});

		} else {
			$more.removeClass('--shown');
		}

	},

	_handleMoreClick: function (e) {
		var self = e.data.self;

		e.preventDefault();

		$('#header .header__menu__item--more').toggleClass('--opened');
	},

	_handleDocumentClick: function (e) {
		var self = e.data.self;

		var moreSelector = '.header__menu__item--more';
		if ( $(e.target).closest(moreSelector).length == 0 ){
			$('#header ' + moreSelector).removeClass('--opened');
		}
	},

	_handleWindowResize: function (e) {
		var self = e.data.self;

		self._adjustMoreItem();
	},

	_bindUI: function () {
		var self = this;

		$(document).on('click', {self: self}, self._handleDocumentClick);
		$(document).on('click', '.header__menu__item--more > a', {self: self}, self._handleMoreClick);
		$(window).on('resize', {self: self}, self._handleWindowResize);
	},

	init: function () {
		var self = this;

		if ( $('#header').length == 0) return;

		self._adjustMoreItem();
		self._bindUI();
	}
}

var News = {

	_elems: {
		$_: $(),
		$slider: $()
	},

	_handleNextButton: function (e) {
		var self = e.data.self;

		e.preventDefault();

		self._elems.$slider.trigger('next.owl.carousel');
	},

	_handlePrevButton: function (e) {
		var self = e.data.self;

		e.preventDefault();
		
		self._elems.$slider.trigger('prev.owl.carousel');
	},

	_handleChangedEvent: function (e) {
		var self = e.data.self;

		var activeClass = 'news__item--active';
		var nextIndex = e.item.index;

		self._elems.$slider.find('.news__item').removeClass(activeClass)
			.eq(nextIndex).addClass(activeClass);
	},

	_handleWindowResize: function (e) {
		var self = e.data.self;

		setTimeout(function () {
			self._elems.$slider.trigger('refresh.owl.carousel');
		}, 500);
	},

	_bindUI: function () {
		var self = this;

		self._elems.$_.on('click', '.js-news-next', {self: self}, self._handleNextButton);
		self._elems.$_.on('click', '.js-news-prev', {self: self}, self._handlePrevButton);
		self._elems.$_.on('changed.owl.carousel', {self: self}, self._handleChangedEvent);
		$(window).on('resize', {self: self}, self._handleWindowResize);
	},

	init: function () {
		var self = this;

		var $_ = $('#news');

		if ( $_.length == 0 ) return;

		self._elems.$_ = $_;
		self._elems.$slider = $_.find('.news__list');

		self._bindUI();

		self._elems.$slider.owlCarousel({
		    loop: true,
		    autoWidth: true,
		    smartSpeed: 500
		});	
	}
};

var Form = {

	_handleFocusOnInput: function (e) {
		var self = e.data.self;

		$(this).parent().addClass('--focus');
	},

	_handleBlurOnInput: function (e) {
		var self = e.data.self;

		$(this).parent().removeClass('--focus');
	},

	_handleInputChange: function (e) {
		var self = e.data.self;

		$(this).parent().toggleClass('--filled', !!$(this).val().length);
	},

	_handleFileChange: function (e) {
		var self = e.data.self;

		var files = $(this).find('input[type="file"]')[0].files;
		var names = $.map(files, function (file) {
			return file.name;
		});

		if ( names.length == 0 ) {
			$(this)
				.removeClass('_chosen');
		} else {
			$(this)
				.addClass('_chosen')
				.find('.js-form-file__names')
				.html(names.join(', '));
		}

	},

	_handleCheckedState: function (e) {
		var self = e.data.self;

		var isChecked = $(this).prop('checked');
		$(this).closest('.form__check').toggleClass('--active', isChecked);
	},

	_bindUI: function () {
		var self = this;

		$(document).on('ifCreated ifToggled', '.form__check input', {self: self}, self._handleCheckedState);
		$(document).on('focus', '.js-form-input', {self: self}, self._handleFocusOnInput);
		$(document).on('blur', '.js-form-input', {self: self}, self._handleBlurOnInput);
		$(document).on('change', '.js-form-input', {self: self}, self._handleInputChange);
		$(document).on('change', '.js-form-file', {self: self}, self._handleFileChange);
	},

	init: function () {
		var self = this;

		// init autosize
		autosize($('textarea'));

		self._bindUI();		

		// init checkboxes
		$('input').iCheck();
	}

};

var Talgat = {

	init: function () {

		$('.jsTTasksSlider').owlCarousel({
			items: 1,
			dots: false,
			nav: true,
			loop: true,
			navText: [''],
			navContainer: '.tTasks__nav'
		});

		$('.jsTIntroducedSlider').owlCarousel({
			items: 1,
			dots: false,
			nav: true,
			loop: true,
			navText: [''],
			navContainer: '.tIntroduced__nav'
		});

		$('.jsTComponentsSlider').owlCarousel({
			items: 1,
			dots: false,
			nav: true,
			loop: true,
			navText: [''],
			navContainer: '.tComponents__nav'
		});

	}
};


var ScrollableTable = {
    init: function() {
        
        var initialOverflow = false;

        var scrollableTables = Array.prototype.slice.call(
            document.querySelectorAll(".js-news-details-content table")
        );

        function wrapTable(table) {
            
            var tableBlock = document.createElement("div");
            tableBlock.className = 'table-block';
            var tableGradientWrapper = document.createElement("div");
            tableGradientWrapper.className = 'table-gradient-wrapper js-srollable-table';
            var tableScrollContainer = document.createElement("div");
            tableScrollContainer.className = 'table-scroll-container js-scroll-container';
            var tablePreviousSibling = table.previousElementSibling;
            var tablePreviousSiblingType;
            
            table.parentNode.insertBefore(tableBlock, table);

            tableBlock.appendChild(tableGradientWrapper)
            tableGradientWrapper.appendChild(tableScrollContainer);
            tableScrollContainer.appendChild(table)

            if (tablePreviousSibling) {
                tablePreviousSiblingType = tablePreviousSibling.nodeName.toLowerCase();
                if (tablePreviousSiblingType === 'h1' ||  tablePreviousSiblingType === 'h2' ||  tablePreviousSiblingType === 'h3' ||  tablePreviousSiblingType === 'h4' ||  tablePreviousSiblingType === 'h5' ||  tablePreviousSiblingType === 'h6') {
                    tableBlock.insertBefore(tablePreviousSibling, tableGradientWrapper);
                }
            }

            return {
                tableGradientWrapper: tableGradientWrapper,
                tableScrollContainer: tableScrollContainer
            }
        }



        window.wrapTable = wrapTable;



        function addDragScrollHandlers(element) {
            var pressed = false;
            var startX;
            var scrollLeft;
            element.addEventListener("mousedown", function(event) {
                pressed = true;
                element.classList.add("active");
                startX = event.pageX - element.offsetLeft;
                scrollLeft = element.scrollLeft;
            });
            element.addEventListener("mouseleave", function() {
                pressed = false;
                element.classList.remove("active");
            });
            element.addEventListener("mouseup", function() {
                pressed = false;
                element.classList.remove("active");
            });
            element.addEventListener("mousemove", function(event) {
                if (!pressed) {
                    return;
                }
                event.preventDefault();
                var x = event.pageX - element.offsetLeft;
                var walk = x - startX;
                element.scrollLeft = scrollLeft - walk;
            });
        }

        scrollableTables.forEach(function(item) {

            var containers = wrapTable(item);
            var scrollableContainer = containers.tableScrollContainer
            var gradientWrapper = containers.tableGradientWrapper

            var handleGradientsOnStart = function() {
                if (
                    scrollableContainer.scrollWidth >
                    scrollableContainer.offsetWidth
                ) {
                    initialOverflow = true;
                    gradientWrapper.classList.add(
                        "table-gradient-wrapper--right-gradient"
                    );
                } else {
                    initialOverflow = false;
                    gradientWrapper.classList.remove(
                        "table-gradient-wrapper--right-gradient"
                    );
                }
            };

            var handleGradientsOnScroll = function() {
                var scrollLeft = this.scrollLeft;
                var scrollWidth = this.scrollWidth;
                var offsetWidth = this.offsetWidth;

                if (scrollLeft > 0 && scrollLeft < scrollWidth - offsetWidth) {
                    gradientWrapper.classList.add(
                        "table-gradient-wrapper--right-gradient"
                    );
                    gradientWrapper.classList.add(
                        "table-gradient-wrapper--left-gradient"
                    );
                } else if (scrollLeft === 0) {
                    gradientWrapper.classList.remove(
                        "table-gradient-wrapper--left-gradient"
                    );
                } else if (
                    scrollLeft > 0 &&
                    scrollLeft === scrollWidth - offsetWidth
                ) {
                    gradientWrapper.classList.remove(
                        "table-gradient-wrapper--right-gradient"
                    );
                }
            };

            if (scrollableContainer) {
                new PerfectScrollbar(scrollableContainer, {
                    maxScrollbarLength: 105
                });

                handleGradientsOnStart();

                addDragScrollHandlers(scrollableContainer);

                if (initialOverflow) {
                    scrollableContainer.addEventListener(
                        "scroll",
                        handleGradientsOnScroll
                    );
                }

                window.addEventListener("resize", function() {
                    scrollableContainer.removeEventListener(
                        "scroll",
                        handleGradientsOnScroll
                    );
                    handleGradientsOnStart();
                    if (initialOverflow) {
                        scrollableContainer.addEventListener(
                            "scroll",
                            handleGradientsOnScroll
                        );
                    }
                });
            }
        });
    }
};
var NewsSlider = {
    init: function() {
        var newsSliders = Array.prototype.slice.call(
            document.querySelectorAll(".js-news-slider")
        );

        newsSliders.forEach(function(item) {
           
            var sliderInstance = new Swiper(item, {
                slidesPerView: "auto",
                navigation: {
                    nextEl: document.querySelector(".js-news-slider--next"),
                    prevEl: document.querySelector(".js-news-slider--prev")
                },
                init: false
            });

            sliderInstance.init();
            
        });
    }
};
var NewsPhotoSlider = {
    init: function() {
        var photoSliders = Array.prototype.slice.call(
            document.querySelectorAll(".js-news-details-photo-slider")
        );


    
        photoSliders.forEach(function(item) {
            var thumbnails = item.querySelector(
                ".js-news-details-thumbnails-slider"
            );
            var container = item.querySelector(".swiper-container");
            var thumbContainer;
            if (thumbnails) {
                thumbContainer = thumbnails.querySelector(".swiper-container");
            }

            if (container && thumbContainer) {
                new Swiper(container, {
                    effect: "fade",
                    speed: 600,
                    fadeEffect: { crossFade: true },
                    navigation: {
                        nextEl: document.querySelector(
                            ".news-details__photo-slider-next"
                        ),
                        prevEl: document.querySelector(
                            ".news-details__photo-slider-prev"
                        )
                    },
                    thumbs: {
                        swiper: new Swiper(thumbContainer, {
                            slidesPerView: 9,
                            spaceBetween: 15,
                            threshold: 10,
                            // slideToClickedSlide: true,
                            watchSlidesVisibility: true,
                            watchSlidesProgress: true,
                            on: {
                                progress: function() {
                                    if (this.isBeginning) {
                                        thumbnails.classList.remove(
                                            "gradient-left"
                                        );
                                    } else if (this.isEnd) {
                                        thumbnails.classList.remove(
                                            "gradient-right"
                                        );
                                    } else {
                                        thumbnails.classList.add(
                                            "gradient-left"
                                        );
                                        thumbnails.classList.add(
                                            "gradient-right"
                                        );
                                    }
                                }
                            },
                            breakpoints: {
                                
                                460: {
                                    slidesPerView: 4,
                                    spaceBetween: 10,
                                },
                                
                                600: {
                                    slidesPerView: 6,
                                    spaceBetween: 10,
                                },
                                800: {
                                    slidesPerView: 7,
                                    spaceBetween: 15,
                                }
                            }
                        })
                    }
                });
            }
        });
    }
};
var NewsToggles = {
    init: function() {
        function setupHandlers(element) {
            if (element) {
                var elementContainer = element.parentElement;
                var elementContent = element.nextElementSibling;
                if (!elementContent)
                    throw new Error(
                        "Отсутствует блок контента виджета соседней новости"
                    );
                var elementOpen = false;
                function outsideClickHandler(event) {
                    if (
                        !elementContainer.contains(event.target) &&
                        event.target !== elementContainer
                    ) {
                        hideElement();
                    }
                }
                function openElement(event) {
                    if (event) event.preventDefault();
                    if (!elementOpen) {
                        elementContainer.classList.add("active");
                        elementOpen = true;
                        document.addEventListener("click", outsideClickHandler);
                        elementContent.addEventListener(
                            "mouseleave",
                            contentMouseLeaveHandler
                        );
                    }
                }
                function hideElement(event) {
                    if (event) event.preventDefault();
                    if (elementOpen) {
                        elementContainer.classList.remove("active");
                        elementOpen = false;
                        document.removeEventListener(
                            "click",
                            outsideClickHandler
                        );
                        elementContent.removeEventListener(
                            "mouseleave",
                            contentMouseLeaveHandler
                        );
                    }
                }

                function contentMouseLeaveHandler() {
                    hideElement();
                    // elementContent.removeEventListener(
                    //     "mouseleave",
                    //     contentMouseLeaveHandler
                    // );
                }

                element.addEventListener("click", openElement);
                element.addEventListener("mouseenter", function() {
                    openElement();
                    // elementContent.addEventListener(
                    //     "mouseleave",
                    //     contentMouseLeaveHandler
                    // );
                });
            }
        }

        setupHandlers(document.querySelector(".js-news-previous-article"));
        setupHandlers(document.querySelector(".js-news-next-article"));
    }
};

var NavBanner = {

	_elems: {
		$_: $(),
		$slider: $()
	},

	_setLineDimensions: function ($item) {
		var self = this;

		var $item = $item || self._elems.$_.find('.nav-banner__item._active');
		var $line = self._elems.$_.find('.nav-banner__line');

		$line.css({
			left: $item.position().left + parseInt($item.css('padding-left')), 
			width: $item.width()
		});
	},

	_handleLinkClick: function (e) {
		var self = e.data.self;

		e.preventDefault();
		
		var $item = $(this).closest('.nav-banner__item');

		self._setLineDimensions($item);

		// set active class
		$item
			.siblings().removeClass('_active')
			.end().addClass('_active');

		// show slide
		var index = $item.index();
		self._elems.$slider.trigger('to.owl.carousel', [index]);
	},

	_wrapBlocksAsSlides: function () {
		var self = this;

		// find all blocks
		var $blocks = $('.block-wrapper');

		// filter slides
		var $slides = $blocks.filter(function (index, elem) {
			return !!$(elem).children('[data-tabs]').length;
		}); 

		// add wrapper
		var $wrapper = $('<div class="owl-carousel nav-banner__tabs"></div>');
		$wrapper.insertBefore($slides.first());

		// reattach slides
		$slides.detach().appendTo($wrapper);

		// init slider
		$wrapper.owlCarousel({
			items: 1,
			mouseDrag: false,
			touchDrag: false,
			dots: false
		});

		self._elems.$slider = $wrapper;
	},

	_handleWindowResize: function (e) {
		var self = e.data.self;

		self._setLineDimensions();
	},

	_bindUI: function () {
		var self = this;

		$(document).on('click', '.nav-banner__link', {self: self}, self._handleLinkClick);
		$(window).on('resize', {self: self}, self._handleWindowResize);
	},

	init: function () {
		var self = this;

		var $_ = $("#nav-banner");

		if ( $_.length == 0) return;

		self._elems.$_ = $_;

		self._setLineDimensions();
		self._wrapBlocksAsSlides();
		self._bindUI();
	}
};

var TechPromo = {

	_state: {
		timers: []
	},

	_setActiveVideo: function (index) {
		var self = this;

		var $items = $('#tech-promo .bg-layer__item');
		$items.filter('.--active').removeClass('--active').end().find('video')[0].pause();
		$items.eq(index).addClass('--active').end().find('video')[0].play();
	},

	_handleCircleEnter: function (e) {
		var self = e.data.self;

		e.preventDefault();

		var index = $(this).data('index');
		var circleId = $(this).data('circle-id');

		self._state.timers[circleId] = setTimeout(function () {
			self._setActiveVideo(index);
		}, 200);
	},

	_handleCircleLeave: function (e) {
		var self = e.data.self;

		e.preventDefault();

		var circleId = $(this).data('circle-id');

		clearTimeout(self._state.timers[circleId]);
		self._setActiveVideo(0);
	},

	_bindUI: function () {
		var self = this;

		$('#tech-promo .tech-promo__circle').on('mouseenter', {self: self}, self._handleCircleEnter);
		$('#tech-promo .tech-promo__circle').on('mouseleave', {self: self}, self._handleCircleLeave);
	},

	init: function () {
		var self = this;

		var $_ = $('#tech-promo');

		if ( $_.length == 0) return;

		$_.find('.tech-promo__orbit').addClass('--active');

		setTimeout(function () {
			$_.find('.tech-promo__point').addClass('--active');
		}, 2000);

		setTimeout(function () {
			$_.find('.tech-promo__center').addClass('--active');
		}, 3000);

		setTimeout(function () {
			$_.find('.tech-promo__circle').addClass('--active');
		}, 3500);

		self._bindUI();
	}
}
var About = {

    _elems: {
        $_: $(),
        $iScroll: $()
    },

    _state:  {
        isMobile : false,
        scrollType : false,
        run : false
    },
    
    _setIsMobile: function(){
        var self = this;

        self._state.isMobile = $(window).width() <= 576;
    },

    _setBodyHeight: function(){
        var self = this;

        if ($(window).width() >= self._elems.$iScroll.children().width()) {
            $('body').height($(window).width() * self._elems.$iScroll.children().length);
        } else {
            $('body').height(self._elems.$iScroll.width());
        }
    },

    _setScrollWidth: function(){
        var self = this;

        if ($(window).width() >= self._elems.$iScroll.children().width()) {
            self._elems.$iScroll.width($(window).width() * self._elems.$iScroll.children().length);
        }
    },

    _initRangeSlider: function () {
        var self = this;

        var $range = self._elems.$_.find('.gantt-slider__range');
        $range.data('position', 0);
        $range.find('input').rangeslider({
            polyfill: false,
            onInit: function () {
                $range.find('.rangeslider__handle').html('<i></i><i></i><i></i>');
            },
            onSlide: function(position, value) {
                if (value == self._state.lastRangeValue) return;
                self._state.lastRangeValue = value;

                if (self._elems.$iScroll.data('direction') == 'right') {
                    if (position < $range.data('position')) {
                        self._elems.$iScroll.data('direction', 'left');
                    }
                } else if (self._elems.$iScroll.data('direction') == 'left') {
                    if (position > $range.data('position')) {
                        self._elems.$iScroll.data('direction', 'right');
                    }
                }

                $range.data('position', position);

                var maxScrollLeft = self._elems.$iScroll.width() - self._elems.$iScroll.width() / self._elems.$iScroll.children().length;
                var scrollLeft    = maxScrollLeft / 1000 * value;
                self._elems.$_.find('.gantt-slider__scroll').scrollLeft(scrollLeft);
                if(self._state.scrollType == 'range')
                    $(window).scrollTop(scrollLeft);
            }
        });
    },

    _initGeo: function(){
        var self = this;

        var $iGeo = self._elems.$_.find('.iGeo');
        if ($iGeo.length == 0) return;

        var $iGeoMap   = $iGeo.find('.iGeo__map');
        var $iGeoItems = $iGeo.find('.iGeo__items');
        var $iGeoItem  = $iGeoItems.children('.iGeo__item');

        var offsetTop = self._state.isMobile ? 200 : 63;

        var iGeoMapHeight = $iGeoMap.height() + offsetTop;
        var iGeoMapWidth  = $iGeoMap.width();

        $iGeoItems.width(!self._state.isMobile ? $iGeoMap.width() : '100%');

        $iGeoItem.each(function(){
            var top = 0;
            var left = 0;

            if ($(this).data('top') > 0) {
                top = $(this).data('top') / iGeoMapHeight * 100;
            }
            
            if ($(this).data('left') > 0) {
                left = $(this).data('left') / iGeoMapWidth * 100 + 0.75;
            }

            if (self._state.isMobile) {
                top = Math.max(0, top - 40);
            }

            $(this).stop().animate({'top': top + '%', 'left': left + '%'}, 1000).addClass('iGeo__item--active');
        });
    },
    _initDigits: function(){
        var self = this;

        var $iDigits = self._elems.$_.find('.iDigits');
        if ($iDigits.length == 0) return;

        var $iDigitsSlides = $iDigits.find('.iDigits-slides.owl-carousel');
        var $iDigitsValues = $iDigitsSlides.find('.iDigits-values');
        var $iDigitsValueItem = $iDigitsSlides.find('.iDigits-values__item');

        var owlDigits = $iDigitsSlides.owlCarousel({
            nav: false,
            dots: false,
            items: 1,
            auto: false,
            responsive: {
                568 : {
                    nav : true
                }
            }
        });

        owlDigits.on('changed.owl.carousel', function(e){
            $iDigitsValueItem.removeClass($iDigitsValues.data('active'));
            $iDigitsValueItem.eq(e.item.index).addClass($iDigitsValues.data('active'));
        });

        $iDigitsValueItem.eq(0).addClass($iDigitsValues.data('active'));

        $iDigitsValueItem.click(function(){
            $('.iDigits-values__item').removeClass($('.iDigits-values').data('active'));

            $(this).addClass($('.iDigits-values').data('active'));

            var index = self._state.isMobile ? $(this).parent().index() : $(this).index();

            $('.iDigits .owl-carousel').trigger('to.owl.carousel', index);
        });

        if(self._state.isMobile){
            var owlDigitsValues = $('.iDigits-values.owl-carousel').owlCarousel({
                nav: false,
                dots: false,
                auto: false,
                autoWidth: true
            });
        }
    },
    _initLeadership: function(){
        var self = this;

        var $iLeadership = self._elems.$_.find('.iLeadership');
        if ($iLeadership.length == 0) return;

        var $iLeadershipItem = $iLeadership.find('.iLeadership-item');
        var $iLeadershipModal = $("#leadershipModal");

        var height = $iLeadershipItem.eq(0).height();
        $iLeadershipItem.width(height*0.8);

        $iLeadership.find('.button').click(function(e){
            e.preDefault();

            if(self._state.isMobile) {
                if ($(this).hasClass('opened')) {
                    $iLeadership.find('.page__center').removeClass('opened');
                    $(this).removeClass('opened').children('.button-default__text').text('Показать еще');
                    $(this).children('i').show();
                } else {
                    $iLeadership.find('.page__center').addClass('opened');
                    $(this).addClass('opened').children('.button-default__text').text('Скрыть');
                    $(this).children('i').hide();
                }
            }
        });

        $iLeadershipModal.iziModal({
            overlayColor: 'rgba(0, 0, 0, 0.8)',
            width: 912,
            padding: 45,
            radius: 0,
            overlayClose: false,
            onOpening: function(e){
                var modal = e.$element;
                var left = modal.find('.iLeadership-modal__left');
                var right = modal.find('.iLeadership-modal__right');

                $.ajax({
                    url: 'data/leadership.json',
                    dataType: 'json',
                    beforeSend: function () {
                        modal.addClass('--loading');
                        left.empty();
                        right.empty();
                    },
                    success: function (data) {
                        setTimeout(function(){
                            modal.removeClass('--loading');
                        }, 500);

                        if(data.image)
                            left.append(
                                $('<img />')
                                    .attr('src', data.image)
                            );

                        if(data.name)
                            right.append(
                                $('<p/>')
                                    .addClass('iLeadership-modal__name')
                                    .text(data.name)
                            );

                        if(data.position)
                            right.append(
                                $('<p/>')
                                    .addClass('iLeadership-modal__position')
                                    .text(data.position)
                            );

                        if(data.content.length)
                            data.content.forEach(function (content) {
                                if (content.title)
                                    right.append(
                                        $('<p/>')
                                            .addClass('iLeadership-modal__title')
                                            .text(content.title)
                                    );
                                if (content.text)
                                    right.append(
                                        $('<div/>')
                                            .addClass('iLeadership-modal__text')
                                            .html(content.text)
                                    );
                            });
                    }
                })
            }
        });

        $iLeadershipModal.find('.iziModal-close').click(function(e){
            e.preDefault();
            $iLeadershipModal.iziModal('close');
        });

        $iLeadershipItem.click(function(e){
            e.preDefault();
            $iLeadershipModal.iziModal('open');
        });
    },

    _initHistory: function(){
        var self = this;

        var $iHistory = self._elems.$_.find('.iHistory');
        if ($iHistory.length == 0) return;

        var ruler = $iHistory.find('.iHistory-ruler__line .owl-carousel');
        var es = $iHistory.find('.iHistory-es .owl-carousel');

        if(ruler.length == 0) return;
        if(es.length == 0) return;

        var owlRuler = ruler.owlCarousel({
            nav: false,
            dots: false,
            items: Math.min(14, ruler.data('count')),
            auto: false
        });

        var owles = es.owlCarousel({
            nav: false,
            dots: false,
            items: 1,
            auto: false
        });

        $iHistory.find('.iHistory-ruler__item a').click(function(e){
            e.preDefault();

            $iHistory.find('.iHistory-ruler__item').removeClass('iHistory-ruler__item--active');

            $(this).parent().addClass('iHistory-ruler__item--active');

            es.trigger('to.owl.carousel', $(this).parents('.owl-item').index() + 1);
        });
    },

    _initNav: function(){
        var self = this;

        var $iNav = self._elems.$_.find('.iNav');
        if ($iNav.length == 0) return;

        $iNav.children('a').click(function(e){
            e.preventDefault();

            var $target = $($(this).attr('href'));
            if($target.length == 0) return;

            var scrollLeft = self._elems.$_.find('.gantt-slider__scroll').scrollLeft();
            self._elems.$_.find('.gantt-slider__scroll').scrollLeft(scrollLeft + $target.offset().left);
        });
    },

    _handleSliderScroll: function (e) {
        var self = e.data.self;

        if(self._elems.$_.find('.gantt-slider__scroll').hasClass('window-scroll'))
            self._elems.$_.find('.gantt-slider__scroll').removeClass('window-scroll')
        else
            self._state.scrollType = 'range';

        var scrollLeft = self._elems.$_.find('.gantt-slider__scroll').scrollLeft();
        var maxScrollLeft = self._elems.$iScroll.width() - self._elems.$iScroll.width() / self._elems.$iScroll.children().length;
        var rangeValue = Math.round(1000 * scrollLeft / maxScrollLeft);
        self._elems.$_.find('.gantt-slider__range input').val(rangeValue).change();

        var img = $('#wrapper .brand-box__image img');

        self._elems.$iScroll.children('.iScroll-item').each(function(){
            if(
                self._elems.$iScroll.data('direction') == 'right' && $(this).offset().left >= 0 && $(this).offset().left < 360
                ||
                self._elems.$iScroll.data('direction') == 'left' && $(this).width() + $(this).offset().left > 200 && $(this).width() + $(this).offset().left < 1600
            ){
                if($(this).find('.iScroll-item__label') !== undefined && $(this).find('.iScroll-item__label').length) {
                    $('#wrapper .page__label').text($(this).find('.iScroll-item__label').text());
                }
                else
                    $('#wrapper .page__label').text('О компании');

                if($(this).hasClass('iRatings')) {
                    img.attr('src', img.data('white'));
                    $(this).addClass('active');
                }
                else
                    img.attr('src', img.data('original'));
            }
        });
    },

    _bindUI: function(){
        var self = this;

        if(!self._state.isMobile) {
            self._initRangeSlider();
        }

        $(window).resize(function(){
            if($(window).width() <= 576)
                self._state.isMobile = true;
            else
                self._state.isMobile = false;
        });

        $(window).scroll(function(){
            if(!self._state.isMobile) {
                self._state.scrollType = 'window';
                self._elems.$_.find('.gantt-slider__scroll').scrollLeft($(window).scrollTop()).addClass('window-scroll');

                self._elems.$_.find('[data-factor]').each(function(){
                    var parent = $(this).parents('.iScroll-item');
                    if(parent.length == 0) return;

                    if((parent.offset().left < $(window).width() + 100) && (parent.offset().left + parent.width()) > -100){
                        $(this).css({
                            'transform': 'translate(' + parent.offset().left * $(this).data('factor') + 'px, 0px)',
                            'transition': 'transform 0.2s linear 0s',
                            'will-change': 'transform'
                        });
                    }
                });
            }
        });

        if(!self._state.isMobile){
            self._elems.$_.find('.gantt-slider__scroll').on('scroll', {self: self}, self._handleSliderScroll);
            //$(window).on('resize orientationchange', {self: self}, self._handleWindowResize);
        }
    },

    init: function () {
        var self = this;

        var $_ = $('#about-slider');

        if ( $_.length == 0 ) return;

        self._elems.$_ = $_;
        self._elems.$iScroll = $_.find('.iScroll');

        self._setIsMobile();
        self._setBodyHeight();
        self._setScrollWidth();
        self._initGeo();
        self._initDigits();
        self._initLeadership();
        self._initHistory();
        self._initNav();

        self._bindUI();
    }
};

var NavMobile = {

	_state: {
		isOpened: false
	},

	_open: function () {
		var self = this;

		if (self._state.isOpened) return;

		$('body').addClass('page__locked');
		$('#nav-mobile').addClass('_active');

		self._state.isOpened = true;
	},

	_close: function () {
		var self = this;

		if (!self._state.isOpened) return;

		$('body').removeClass('page__locked');
		$('#nav-mobile').removeClass('_active');

		self._state.isOpened = false;
	},

	_handleOpenButton: function (e) {
		var self = e.data.self;

		e.preventDefault();

		self._open();
	},

	_handleCloseButton: function (e) {
		var self = e.data.self;

		e.preventDefault();

		self._close();
	},

	_handleMatchMedia: function (mql) {
		var self = this;

		if (!mql.matches) self._close();
	},

	_bindUI: function () {
		var self = this;

		$(document).on('click', '.js-nav-mobile-open', {self: self}, self._handleOpenButton);
		$(document).on('click', '.js-nav-mobile-close', {self: self}, self._handleCloseButton);
		window.matchMedia('(max-width: 950px)').addListener(self._handleMatchMedia.bind(self));
	},

	init: function () {
		var self = this;

		self._bindUI();
	}
}


var NavSticker = {

	_elems: {
		$_: $(),
		$static: $(),
		$fixed: $(),
		$lists: $(),
		$items: $()
	},

	_initOnePageNav: function () {
		var self = this;

		self._elems.$static.find('.nav-sticker__list').onePageNav({
			currentClass: '--active',
			scrollChange: function ($current) {
				var index = $current.index();
				self._setItemsActiveState(index);
			}
		});
	},

	_initMidnight: function () {
		var self = this;

		self._elems.$fixed.midnight();
	},

	_isItemInsideOfFixed: function ($item) {
		var self = this;

		return !!$item.closest('.midnightInner').length;
	},

	_setItemsActiveState: function (index) {
		var self = this;

		self._elems.$items.each(function () {
			$(this).toggleClass('--active', $(this).index() === index);
		});
	},

	_setNavsHiddenState: function () {
		var self = this;

		var scrollTop = $(window).scrollTop();
		var staticOffsetTop = self._elems.$static.offset().top;
		var isStaticHidden = staticOffsetTop - scrollTop < 40;
		var isFixedHidden = !isStaticHidden;

		self._elems.$static.toggleClass('--hidden', isStaticHidden);
		self._elems.$fixed.toggleClass('--hidden', isFixedHidden);
	},

	_handleWindowScroll: function () {
		var self = this;

		self._setNavsHiddenState();
	},

	_handleLinkClick: function (e) {
		var self = e.data.self;

		e.preventDefault();

		var index = $(this).parent().index();

		if ( self._isItemInsideOfFixed($(this)) ) {
			self._elems.$static
				.find('.nav-sticker__item').eq(index)
				.find('.nav-sticker__link').trigger('click');
		} else {
			self._setItemsActiveState(index);
		}
	},

	_handleListMouseEnter: function (e) {
		var self = e.data.self;

		self._elems.$_.addClass('--hover');
	},

	_handleListMouseLeave: function (e) {
		var self = e.data.self;

		self._elems.$_.removeClass('--hover');
	},

	_bindUI: function () {
		var self = this;

		$(document).on('mouseenter', '.nav-sticker__list', {self: self}, self._handleListMouseEnter);
		$(document).on('mouseleave', '.nav-sticker__list', {self: self}, self._handleListMouseLeave);
		$(document).on('click', '.nav-sticker__link', {self: self}, self._handleLinkClick);
		window.addEventListener('scroll', self._handleWindowScroll.bind(self), false);
	},

	init: function () {
		var self = this;

		var $_ = $('#nav-sticker');

		if ( $_.length == 0) return;

		self._elems.$_ = $_;
		self._elems.$static = $('#nav-sticker-static');
		self._elems.$fixed = $('#nav-sticker-fixed');

		// creates nav clones
		self._initMidnight();

		// save links after cloning & init for each nav
		self._elems.$lists = $_.find('.nav-sticker__list');
		self._elems.$items = $_.find('.nav-sticker__item');
		self._initOnePageNav();

		// show or hide
		self._setNavsHiddenState();

		self._bindUI();
	}

};

var CatalogFilter = {

	_elems: {
		$formFilter: $(),
		$navVideo: $()
	},

	_handleVideoMouseenter: function (e) {
		var self = e.data.self;

		if ($(this).hasClass('--active')) return;

		var $video = $(this).find('video.--active');
		if ($video.length) $video[0].play();
	},

	_handleVideoMouseleave: function (e) {
		var self = e.data.self;

		if ($(this).hasClass('--active')) return;

		var $video = $(this).find('video.--active');
		if ($video.length) $video[0].pause();
	},

	_handleVideoClick: function (e) {
		var self = e.data.self;

		$(this).toggleClass('--active').siblings().removeClass('--active');
	},

	_bindUI: function () {
		var self = this;

		self._elems.$navVideo.on('mouseenter', '.nav-video__item', {self: self}, self._handleVideoMouseenter);
		self._elems.$navVideo.on('mouseleave', '.nav-video__item', {self: self}, self._handleVideoMouseleave);
		self._elems.$navVideo.on('click', '.nav-video__item', {self: self}, self._handleVideoClick);
	},

	init: function () {
		var self = this;

		var $formFilter = $('#form-filter');
		var $navVideo = $('#nav-video');

		if ($navVideo.length == 0) return;

		self._elems.$formFilter = $formFilter;
		self._elems.$navVideo = $navVideo;

		self._bindUI();
	}
};

var Hover = {

	_handleWingsMouseenter: function (e) {
		var self = e.data.self;

		$(this).addClass('--hover');
	},

	_handleWingsMouseleave: function (e) {
		var self = e.data.self;

		$(this).removeClass('--hover');
	},


	_bindUI: function () {
		var self = this;

		$(document).on('mouseenter', '.js-hover-wings', {self: self}, self._handleWingsMouseenter);
		$(document).on('mouseleave', '.js-hover-wings', {self: self}, self._handleWingsMouseleave);
	},

	init: function () {
		var self = this;

		self._bindUI();
	}
}
var Utils = {

	isMobile: function () {
		return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
	}

};
var App = {

	_state: {
		preloaderTimer: null,
		promoVideosTotal: 0,
		promoVideosLoaded: 0,
		isUserActivityHandled: false,
		isWindowLoaded: false
	},

	_showContent: function () {
		var self = this;

		if ( self._state.isWindowLoaded === false ) return;
		if ( self._state.promoVideosLoaded !== self._state.promoVideosTotal) return;

		clearInterval(self._state.preloaderTimer);

		$('#hello').removeClass('hello--active');
		$('body').removeClass('page__locked');

		TechPromo.init();
		NavMobile.init();
		Overview.init();
		CatalogFilter.init();
		Hover.init();

		// trigger click to start loading lazy videos
		$('body').trigger('click');
	},

	_startLazyVideosLoading: function () {
		var self = this;

		$('video[data-lazy]').each(function () {
			$(this)[0].load();
		});
	},

	_handleUserActivity: function (e) {
		var self = e.data.self;

		if ( self._state.isUserActivityHandled ) return;
		if ( !Modernizr.video || Modernizr.lowbandwidth ) return;

		self._state.isUserActivityHandled = true;
		setTimeout(self._startLazyVideosLoading.bind(self), 100);
	},

	_handleDOMReady: function () {
		var self = this;

		// it's important to call NavBanner inition first,
		// because tabs content can contain other sliders inside
		NavBanner.init();

		GanttSlider.init();
		CitiesSlider.init();
		SliderContent.init();
		SliderDigits.init();
		SliderTabs.init();
		Header.init();
		News.init();
		Form.init();
		ScrollableTable.init();
		NewsSlider.init();
		NewsPhotoSlider.init();
		NewsToggles.init();
		NavSticker.init();
		About.init();
		Talgat.init();
	},

	_handleWindowLoad: function () {
		var self = this;

		self._state.isWindowLoaded = true;
	},

	_handleCanPlayEvent: function (e) {
		var self = e.data.self;

		objectFitPolyfill(this);
		$(this).addClass('--active');

		if ($(this).data('promo') !== undefined) {
			self._state.promoVideosLoaded++;
		}

		if ($(this).data('play') !== undefined) {
			$(this)[0].play();
		} 
	},

	_bindUI: function () {
		var self = this;

		$(document).one('click touchstart', {self: self}, self._handleUserActivity);
		$(window).on('load', self._handleWindowLoad.bind(self));
		$('video').one('canplaythrough', {self: self}, self._handleCanPlayEvent);
		$(self._handleDOMReady.bind(self));
	},

	init: function () {
		var self = this;

		if (Utils.isMobile()) {
			$('html').addClass('mrkwbr-is-mobile');
		} else {
			$('html').addClass('mrkwbr-no-mobile');
		}

		// count promo videos
		self._state.promoVideosTotal = $('video[data-promo]').length;

		// run preloader timer
		self._state.preloaderTimer = setInterval(self._showContent.bind(self), 50);

		self._bindUI();
	}
};

App.init();